%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: solonen.pdf
%%Creator: Adobe Acrobat 9.5.1
%%For: roban
%%CreationDate: 09/11/2012, 10:31:50 AM
%%BoundingBox: 34 11 578 781
%%HiResBoundingBox: 34.8371 11.3401 577.1630 780.6600
%%CropBox: 34.8371 11.3401 577.1630 780.6600
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (HP LaserJet Professional P1102w) (3010.000) 550
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 1 -1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize Letter
<</PageSize [612 792 ] >> setpagedevice
%% FoomaticRIPOptionSetting: PageSize=Letter
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 862 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2012-08-22T08:47:13+02:00"
   xmp:CreateDate="2012-08-22T08:47:04+02:00"
   xmp:MetadataDate="2012-08-22T08:47:13+02:00"
   xmp:CreatorTool=" TeX output 2012.08.21:1023"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:8b4a9863-bdf4-4bdb-8650-704ef2fb5099"
   xmpMM:InstanceID="uuid:b5e3c754-024f-4a6c-bffe-b7775b41382d"
   pdf:Producer="dvipdfm 0.13.2d, Copyright © 1998, by Mark A. Wicks"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 21 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (21)]
[/TrimBox [34.83708190918 11.340026855469 577.16290283203 780.65997314453]]
[/BleedBox [34.83708190918 11.340026855469 577.16290283203 780.65997314453]]
[/ArtBox [0 0 612 792 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[0 -1 1 0 0 792 ]ct
gsave
np
gsave
11.34 34.8371 mo
11.34 577.163 li
780.66 577.163 li
780.66 34.8371 li
cp
clp
[2.36795 0 0 2.36795 -342.01 -280.495 ]ct
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: YNDAAA+CMSL10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YNDAAA+CMSL10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -9.46 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 65 /A put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 116 /t put
def
/FontBBox {-62 -250 1123 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [79] def
/StemSnapH [22 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/period <1C60D8A8C9B08A9570810981675968F2C90F5041A0F57475B30B52D
239980B2327F049FEC43B1640D439543AE0DA> |-
/A <1C60D8A8C9B6E3FA234780E51B74F22595A687FBF099ECCD169F4B61C2D1
A85135B7E39FC8BC7DDC883396C9BED671EA5A0F670D9769010EACD421439184
5B4028A3730D4124A7DEF00B815892A06CA23AFB9EEF7A8970959909A0CFA9BC
A39583CFB99402544869519261C0AC0232E84E461057EB3F52B4BB9488E023AD
8CD9BCD653B3AB0F6E6335C8DE5FEFD839BF27671B3041E7377BA28EF6B30820
307A1D9A2780C261573B> |-
/S <1C60D8A8C9B08A95C5897169EED99899F86A6DCF3CE664AB88A2F7A7D406
2C89B1BC040784ADF87D384DADC53E9739460B3D27F6C616F82A031D91D81619
ACD3954674E9422A284D7ADD8E291BC1E21E8100CA0AA3EF85E1A56BDA8FB4A1
CAAB629BB2F69CE745CBA04E1E23F2C012801C78C50F991441C9B20EB65C9449
626E19ADCD276CEA49D205F61C97E0963D1BA27D2863FFEC8D3E8F922B3375F6
331FBBF450CFAF305341C76542CF389E0351FD7BD0D81332B024E1DC434BCB82
5441D1B7BA1CA893E5CEAA29F1711F67CA22CA52DA4F17CC4E1A8F4D8C4F60> |-
/a <1C60D8A8C9B7A73DCEB5869E93AB192C100B3A3DF214CD3D58118347B632
658B2B409ED995975859E6392E1726DD72DFBB6800950A6F3014DE883F0EA82A
1801A4666A862FBD27C9846720732E60B28C812F14D4BF57175C74D5A364B86C
B991A6BC61DBB73F1A0B4CF924C58B983F14DCB92445624306C210A7E8A2D5A0
38578DDDA62BDB94C0D7764D00D0930DA1FBCC08A005FD8C8E22BBB16CE9C80F
E76A34136B54CA105D5F3056CCB7AE61C6A696AA94484F6237ACC07FF8B3437F
F94A45> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B2078048365224F
D23A2161D369E0174CD880A9C149EC8B5260A268C147EFD3A705871029A509D6
DF2FC399F92F0974A9AFB60205793D3740EEB8486495275C15E0463174D7887E
068900D03723630B8FB82CB3EA2C56316F4286CA10D6D5E4874FDAC176138B84
D66B60744A4F277FAE7820> |-
/l <1C60D8A8C9B08A9570810981675968AD25F31706150B09BF710BA3A066E4
88076DA35777CDDA08FA09C606725867AF764EDC49A4C7C99B3BD7C46749C2CC
0D78D91DECBD6CD64D95FE42406CFEDB56003A80493FEA0E8F3A6FBAD0A9DFCF
82D26D07133B2644DAC294F17F> |-
/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BDC9CEA255E57CC6138
19485AA013046DCF4C6001B23CB754767F1148BAF072D883C42724BA58C29F32
D9163A8A5D1DD90A0B8D0CDFDC84425C599996BD93399AB4E89783BF33253B38
70B3A3675608917F663AD6F8C4AD11A543DE5556D73A5C7598071F1459315FA4
6074CED0693C085C3AF3E33452B00BF4214DB8FE3E55F6AC67408ED32CB6185B
BD276165F5EFAACFDAFA35ABF42849DCD091D4331CCF1F7803AC593AA13AE684
97D945EB19792703EB84A0B022> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841B6D622E01055BF8AC483BE2ED498EE
F8FDC390E7DE818B52BC4F316C6241AD2297266E7FCA86A42B1704CA86FB4CA7
CF4814695193291CA9532241D2CF8C549D873796A5F9BA6E05B943B7DC2F7D68
5EEEAFD0E6C44183B62517392628> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B32BD7C1B99D302CB024956EF34D
3BB3B978BBC7F57B4C9A7747DDFA7FF9B5734F2605B9805714C42C77FE49E34C
712F9CEED439E633C12B6630D5E6281EB485961C69A8E422F968B68B45E5D641
4B7454AB16248003A3A0D1066EA1AC38BDE52AF84FACC8BF4FE3D3BDF37CA0> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LHFFVB+CMSL10 /YNDAAA+CMSL10 findfont ct_VMDictPut
/LHFFVB+CMSL10*1 
[46{/.notdef}rp /period 18{/.notdef}rp /A 17{/.notdef}rp /S 13{/.notdef}rp /a 
3{/.notdef}rp /e 6{/.notdef}rp /l /.notdef /n /o 4{/.notdef}rp 
/t 139{/.notdef}rp]
LHFFVB+CMSL10 nf
LHFFVB+CMSL10*1 [9.9626 0 0 -9.9626 0 0 ]msf
117 106.836 mo
(A.Solonenetal.)
[7.47195 6.08517 5.53526 4.98129 2.76762 4.98131 5.53525 4.42735 8.86275 4.42735 7.19202 4.98131 
2.76761 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: RXMAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RXMAAA+CMR10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
dup 53 /five put
dup 55 /seven put
def
/FontBBox {-251 -250 1009 969} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BA
AE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA539
2FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EF
EEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782E
DC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE
429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F1
6212D1503559B35FC2DB8BD5A49535> |-
/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13
CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9
B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA25
7DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CB
F9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB7
7472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393
F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F92619913BDBD1EF3C9
A> |-
/seven <1C60D8A8C9B7A73D3B2C65B72E3853584348C1AA0EC611B673546899
CAC2F5881F734271F745E6BED9150871364812C182076C7FE649F3BB3D5FD146
09E37BA29EC4E0DD0D9315F7FA96EE3C3E071336C6F3889037BBC9D4C9A05041
1D6417B8A488787A8C755BFD89BE81986B96036872806293> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LHFFVC+CMR10 /RXMAAA+CMR10 findfont ct_VMDictPut
/LHFFVC+CMR10*1 
[51{/.notdef}rp /three /.notdef /five /.notdef /seven 200{/.notdef}rp]
LHFFVC+CMR10 nf
LHFFVC+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
480.056 106.836 mo
(735)
[4.98129 4.98129 0 ]xsh
gsave
138.045 372.845 mo
474 372.845 li
474 120.783 li
138.045 120.783 li
cp
clp
138 372.908 mo
474.062 372.908 li
474.062 120.783 li
138 120.783 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
grestore
181.688 187.846 mo
442.063 187.846 li
442.063 139.658 li
181.688 139.658 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.375 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
181.688 187.846 mo
181.688 139.658 li
442.063 139.658 li
442.063 187.846 li
181.688 187.846 li
@
181.688 187.846 mo
442.063 187.846 li
181.688 139.658 mo
442.063 139.658 li
181.688 187.846 mo
181.688 139.658 li
442.063 187.846 mo
442.063 139.658 li
181.688 187.846 mo
442.063 187.846 li
181.688 187.846 mo
181.688 139.658 li
181.688 187.846 mo
181.688 185.221 li
181.688 139.658 mo
181.688 142.22 li
1 /0 /CSD get_res sepcs
1 sep
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YBAAAA+Helvetica def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /g4 put
def
/FontBBox {-951 -481 1446 1122} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E6
48A7CA97DB1343CA> |-
/g4 <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CD
CD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879
C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB33
0EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B
0E3B0C4781A3901> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica /YBAAAA+Helvetica findfont ct_VMDictPut
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 222{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
179.625 196.908 mo
(!)sh
225.062 187.846 mo
225.062 185.221 li
225.062 139.658 mo
225.062 142.22 li
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g3 <1C60D8A8C9B854D0E3687C43D46768E11610> |-
/g9 <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A2082641
4A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F5645
1722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D
034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D150
2A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 34 /g3 put
dup 35 /g9 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 220{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
219.875 196.908 mo
(!"#)
[4.17 2.08501 0 ]xsh
268.438 187.846 mo
268.438 185.221 li
268.438 139.658 mo
268.438 142.22 li
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g5 <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907
C7468090579C66DE0263BFE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 36 /g5 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 219{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
266.375 196.908 mo
($)sh
311.875 187.846 mo
311.875 185.221 li
311.875 139.658 mo
311.875 142.22 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
306.688 196.908 mo
($"#)
[4.17001 2.08499 0 ]xsh
355.25 187.846 mo
355.25 185.221 li
355.25 139.658 mo
355.25 142.22 li
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g6 <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BD
C09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A435
7093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A
03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290F
B46DD6A2918F4C2C2BDEECA159D78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 37 /g6 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 218{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
353.188 196.908 mo
(%)sh
398.625 187.846 mo
398.625 185.221 li
398.625 139.658 mo
398.625 142.22 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
393.437 196.908 mo
(%"#)
[4.17001 2.08499 0 ]xsh
442.063 187.846 mo
442.063 185.221 li
442.063 139.658 mo
442.063 142.22 li
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g7 <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328
E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE71686
4AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745
FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739
801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE
42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D
92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 38 /g7 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 217{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
440 196.908 mo
(&)sh
181.688 187.846 mo
184.25 187.846 li
442.063 187.846 mo
439.438 187.846 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
175.375 190.595 mo
(!)sh
181.688 171.783 mo
184.25 171.783 li
442.063 171.783 mo
439.438 171.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 174.533 mo
(%!)
[4.17 0 ]xsh
181.688 155.72 mo
184.25 155.72 li
442.063 155.72 mo
439.438 155.72 li
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g8 <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158
BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 39 /g8 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
216{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 158.47 mo
('!)
[4.17 0 ]xsh
181.688 139.658 mo
184.25 139.658 li
442.063 139.658 mo
439.438 139.658 li
@
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g10 <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF23
96DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F0
8B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF
9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BF
F7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9
EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7A
B1C1C6CA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 40 /g10 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 215{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 142.408 mo
(\(!)
[4.17 0 ]xsh
181.688 187.846 mo
442.063 187.846 li
181.688 139.658 mo
442.063 139.658 li
181.688 187.846 mo
181.688 139.658 li
442.063 187.846 mo
442.063 139.658 li
@
gsave
181.688 187.908 mo
442.125 187.908 li
442.125 139.658 li
181.688 139.658 li
cp
clp
1.5 lw
182.5 167.033 mo
184.25 168.158 li
187.75 170.158 li
188.625 170.596 li
189.437 171.095 li
191.188 171.97 li
192.062 172.345 li
192.938 172.783 li
196.438 174.283 li
197.25 174.658 li
198.125 174.97 li
199 175.345 li
203.375 176.908 li
204.25 177.158 li
205.063 177.47 li
206.813 177.97 li
207.688 178.283 li
208.562 178.533 li
209.438 178.72 li
212.063 179.47 li
212.875 179.658 li
213.75 179.908 li
219.874 181.22 li
220.688 181.408 li
221.562 181.533 li
222.437 181.72 li
223.313 181.846 li
224.188 182.033 li
225.062 182.158 li
225.938 182.283 li
226.813 182.408 li
227.625 182.533 li
229.375 182.783 li
230.25 182.845 li
231.125 182.971 li
232 183.033 li
233.75 183.158 li
236.312 183.158 li
238.063 183.033 li
238.937 182.845 li
239.813 182.72 li
240.688 182.47 li
242.438 181.72 li
243.25 181.158 li
244.125 180.533 li
245 179.72 li
245.875 178.72 li
246.75 177.595 li
247.625 176.221 li
248.5 174.595 li
249.375 172.783 li
250.25 170.72 li
251.063 168.47 li
251.938 166.033 li
252.812 163.533 li
253.688 161.095 li
254.563 158.72 li
255.437 156.595 li
256.313 154.783 li
257.188 153.408 li
258.062 152.47 li
258.875 152.033 li
259.75 151.97 li
260.625 152.345 li
261.5 153.033 li
262.375 153.908 li
264.125 156.033 li
265.875 158.283 li
266.687 159.283 li
267.563 160.283 li
268.438 161.221 li
269.312 162.095 li
270.188 162.908 li
271.937 164.283 li
272.813 164.908 li
273.625 165.533 li
276.25 167.033 li
278 167.908 li
279.75 168.658 li
280.625 168.97 li
281.438 169.283 li
282.313 169.595 li
284.938 170.345 li
285.812 170.533 li
286.688 170.658 li
287.563 170.845 li
288.437 170.908 li
289.25 171.033 li
291.875 171.033 li
292.75 170.971 li
293.625 170.845 li
294.5 170.72 li
296.25 170.221 li
297.062 169.97 li
298.813 169.22 li
300.563 168.346 li
301.438 167.845 li
304.063 166.158 li
304.875 165.533 li
305.75 164.908 li
307.5 163.783 li
309.25 162.783 li
311 162.033 li
311.875 161.783 li
312.688 161.533 li
313.562 161.408 li
314.438 161.345 li
315.313 161.408 li
316.187 161.47 li
317.063 161.596 li
318.812 162.095 li
319.625 162.346 li
320.5 162.721 li
321.375 163.033 li
322.25 163.408 li
323.125 163.846 li
324 164.221 li
324.875 164.658 li
325.75 165.033 li
326.625 165.47 li
327.437 165.845 li
328.313 166.283 li
329.188 166.658 li
330.062 167.095 li
332.687 168.22 li
333.563 168.533 li
334.438 168.908 li
335.25 169.22 li
337 169.846 li
340.5 170.845 li
341.375 171.033 li
342.25 171.158 li
343.063 171.346 li
343.937 171.47 li
345.688 171.595 li
346.562 171.658 li
347.438 171.658 li
348.313 171.595 li
349.187 171.533 li
350.063 171.408 li
350.875 171.22 li
352.625 170.72 li
353.5 170.408 li
354.375 170.033 li
356.125 169.158 li
357 168.595 li
357.812 168.033 li
358.688 167.47 li
359.563 166.783 li
360.437 166.158 li
361.313 165.47 li
362.188 164.845 li
363.062 164.158 li
363.938 163.533 li
364.813 162.97 li
365.625 162.47 li
367.375 161.596 li
369.125 161.095 li
370 160.97 li
370.875 160.908 li
371.75 160.97 li
372.625 161.095 li
373.438 161.283 li
375.188 161.783 li
376.063 162.095 li
376.937 162.47 li
377.813 162.908 li
378.688 163.283 li
380.438 164.158 li
381.25 164.596 li
382.125 165.033 li
383 165.533 li
384.75 166.408 li
385.625 166.783 li
387.375 167.658 li
388.25 168.033 li
389.063 168.408 li
390.812 169.158 li
391.688 169.471 li
392.563 169.846 li
393.437 170.158 li
394.313 170.408 li
395.188 170.72 li
396.062 170.971 li
396.875 171.22 li
397.75 171.47 li
398.625 171.658 li
399.5 171.845 li
401.25 172.096 li
402.125 172.158 li
403 172.22 li
403.813 172.283 li
405.563 172.158 li
406.438 172.096 li
408.188 171.721 li
409.063 171.47 li
410.813 170.845 li
411.625 170.408 li
413.375 169.408 li
415.125 168.158 li
416.875 166.783 li
418.625 165.283 li
419.438 164.533 li
420.313 163.783 li
421.187 163.096 li
422.063 162.47 li
422.937 161.908 li
423.812 161.408 li
424.688 161.033 li
425.562 160.72 li
426.437 160.533 li
427.249 160.408 li
428.125 160.408 li
429 160.533 li
429.874 160.658 li
430.75 160.908 li
432.499 161.533 li
433.375 161.908 li
434.25 162.346 li
435.062 162.783 li
435.938 163.283 li
436.812 163.72 li
438.563 164.72 li
439.437 165.158 li
441.188 166.158 li
442.062 166.595 li
.895628 .7673 0 0 cmyk
@
181.688 166.471 mo
182.5 167.033 li
@
grestore
200.27 174.453 mo
200.27 175.143 199.71 175.703 199.02 175.703 cv
198.33 175.703 197.77 175.143 197.77 174.453 cv
197.77 173.763 198.33 173.203 199.02 173.203 cv
199.71 173.203 200.27 173.763 200.27 174.453 cv
f
217.64 181.923 mo
217.64 182.613 217.08 183.173 216.39 183.173 cv
215.7 183.173 215.14 182.613 215.14 181.923 cv
215.14 181.233 215.7 180.673 216.39 180.673 cv
217.08 180.673 217.64 181.233 217.64 181.923 cv
f
235.01 182.733 mo
235.01 183.423 234.45 183.983 233.76 183.983 cv
233.07 183.983 232.51 183.423 232.51 182.733 cv
232.51 182.043 233.07 181.483 233.76 181.483 cv
234.45 181.483 235.01 182.043 235.01 182.733 cv
f
252.29 168.063 mo
252.29 168.753 251.73 169.313 251.04 169.313 cv
250.35 169.313 249.79 168.753 249.79 168.063 cv
249.79 167.373 250.35 166.813 251.04 166.813 cv
251.73 166.813 252.29 167.373 252.29 168.063 cv
f
269.66 161.763 mo
269.66 162.453 269.1 163.013 268.41 163.013 cv
267.72 163.013 267.16 162.453 267.16 161.763 cv
267.16 161.073 267.72 160.513 268.41 160.513 cv
269.1 160.513 269.66 161.073 269.66 161.763 cv
f
287.03 169.773 mo
287.03 170.463 286.47 171.023 285.78 171.023 cv
285.09 171.023 284.53 170.463 284.53 169.773 cv
284.53 169.083 285.09 168.523 285.78 168.523 cv
286.47 168.523 287.03 169.083 287.03 169.773 cv
f
304.445 168.243 mo
304.445 168.933 303.885 169.493 303.195 169.493 cv
302.505 169.493 301.945 168.933 301.945 168.243 cv
301.945 167.553 302.505 166.993 303.195 166.993 cv
303.885 166.993 304.445 167.553 304.445 168.243 cv
f
321.77 161.943 mo
321.77 162.633 321.21 163.193 320.52 163.193 cv
319.83 163.193 319.27 162.633 319.27 161.943 cv
319.27 161.253 319.83 160.693 320.52 160.693 cv
321.21 160.693 321.77 161.253 321.77 161.943 cv
f
339.14 170.673 mo
339.14 171.363 338.58 171.923 337.89 171.923 cv
337.2 171.923 336.64 171.363 336.64 170.673 cv
336.64 169.983 337.2 169.423 337.89 169.423 cv
338.58 169.423 339.14 169.983 339.14 170.673 cv
f
356.51 169.683 mo
356.51 170.373 355.95 170.933 355.26 170.933 cv
354.57 170.933 354.01 170.373 354.01 169.683 cv
354.01 168.993 354.57 168.433 355.26 168.433 cv
355.95 168.433 356.51 168.993 356.51 169.683 cv
f
373.88 160.863 mo
373.88 161.553 373.32 162.113 372.63 162.113 cv
371.94 162.113 371.38 161.553 371.38 160.863 cv
371.38 160.173 371.94 159.613 372.63 159.613 cv
373.32 159.613 373.88 160.173 373.88 160.863 cv
f
391.16 167.073 mo
391.16 167.763 390.6 168.323 389.91 168.323 cv
389.22 168.323 388.66 167.763 388.66 167.073 cv
388.66 166.383 389.22 165.823 389.91 165.823 cv
390.6 165.823 391.16 166.383 391.16 167.073 cv
f
408.53 171.978 mo
408.53 172.668 407.97 173.228 407.28 173.228 cv
406.59 173.228 406.03 172.668 406.03 171.978 cv
406.03 171.288 406.59 170.728 407.28 170.728 cv
407.97 170.728 408.53 171.288 408.53 171.978 cv
f
425.945 161.223 mo
425.945 161.913 425.385 162.473 424.695 162.473 cv
424.005 162.473 423.445 161.913 423.445 161.223 cv
423.445 160.533 424.005 159.973 424.695 159.973 cv
425.385 159.973 425.945 160.533 425.945 161.223 cv
f
443.315 167.703 mo
443.315 168.393 442.755 168.953 442.065 168.953 cv
441.375 168.953 440.815 168.393 440.815 167.703 cv
440.815 167.013 441.375 166.453 442.065 166.453 cv
442.755 166.453 443.315 167.013 443.315 167.703 cv
f
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g16 <1C60D8A8C9B7A73DB974843DC052273B2236A049EB6E5FE1C55CD985D3
062CB5B3D8A046808C9F7D76A5170CE8699B434328F999D97554357E6BC34F04
69> |-
/g1 <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F
722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD2
38F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-
/g15 <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB0653
7F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9
ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD01
61CF> |-
/g2 <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB
8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB536
5991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 41 /g16 put
dup 42 /g1 put
dup 43 /g15 put
dup 44 /g2 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 /g16 /g1 /g15 /g2 211{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [0 -7.5 -7.5 0 0 0 ]msf
166.063 169.22 mo
(\)*+,)
[-3.75 -2.49745 -2.08499 0 ]ysh
gsave
181.688 187.908 mo
442.125 187.908 li
442.125 139.658 li
181.688 139.658 li
cp
clp
1.5 lw
181.688 167.095 mo
182.5 167.658 li
183.375 168.283 li
184.25 168.845 li
186.875 170.345 li
187.75 170.783 li
188.625 171.283 li
189.437 171.721 li
190.313 172.158 li
191.188 172.533 li
192.062 172.97 li
195.563 174.47 li
196.438 174.783 li
197.25 175.158 li
202.5 177.033 li
204.25 177.533 li
205.063 177.845 li
207.688 178.595 li
208.562 178.783 li
210.313 179.283 li
211.187 179.47 li
212.063 179.658 li
212.875 179.845 li
215.5 180.408 li
216.375 180.533 li
217.249 180.721 li
218.125 180.845 li
219 180.908 li
219.874 181.033 li
220.688 181.096 li
221.562 181.158 li
222.437 181.22 li
223.313 181.22 li
224.188 181.158 li
225.062 181.096 li
225.938 180.97 li
226.813 180.783 li
227.625 180.533 li
228.5 180.22 li
229.375 179.783 li
230.25 179.283 li
231.125 178.595 li
232 177.845 li
232.875 176.908 li
233.75 175.783 li
0 .990631 1 .000396735 cmyk
@
grestore
181.688 263.346 mo
442.063 263.346 li
442.063 215.221 li
181.688 215.221 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
181.688 263.345 mo
181.688 215.221 li
442.063 215.221 li
442.063 263.345 li
181.688 263.345 li
@
181.688 263.345 mo
442.063 263.345 li
181.688 215.221 mo
442.063 215.221 li
181.688 263.345 mo
181.688 215.221 li
442.063 263.345 mo
442.063 215.221 li
181.688 263.345 mo
442.063 263.345 li
181.688 263.345 mo
181.688 215.221 li
181.688 263.345 mo
181.688 260.72 li
181.688 215.221 mo
181.688 217.783 li
1 /0 /CSD get_res sepcs
1 sep
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
179.625 272.408 mo
(!)sh
225.062 263.345 mo
225.062 260.72 li
225.062 215.221 mo
225.062 217.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
219.875 272.408 mo
(!"#)
[4.17 2.08501 0 ]xsh
268.438 263.345 mo
268.438 260.72 li
268.438 215.221 mo
268.438 217.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
266.375 272.408 mo
($)sh
311.875 263.345 mo
311.875 260.72 li
311.875 215.221 mo
311.875 217.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
306.688 272.408 mo
($"#)
[4.17001 2.08499 0 ]xsh
355.25 263.345 mo
355.25 260.72 li
355.25 215.221 mo
355.25 217.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
353.188 272.408 mo
(%)sh
398.625 263.345 mo
398.625 260.72 li
398.625 215.221 mo
398.625 217.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
393.437 272.408 mo
(%"#)
[4.17001 2.08499 0 ]xsh
442.063 263.345 mo
442.063 260.72 li
442.063 215.221 mo
442.063 217.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
440 272.408 mo
(&)sh
181.688 263.345 mo
184.25 263.345 li
442.063 263.345 mo
439.438 263.345 li
@
true set_gvm
%ADOBeginSubsetFont: DAFAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /DAFAAA+Helvetica def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g1 put
def
/FontBBox {-951 -481 1446 1122} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E6
48A7CA97DB1343CA> |-
/g1 <1C60D8A8C9B7F374C6243061E982D378A14DF0A305> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LHFFVE+Helvetica /DAFAAA+Helvetica findfont ct_VMDictPut
/LHFFVE+Helvetica*1 
[32{/.notdef}rp /g1 223{/.notdef}rp]
LHFFVE+Helvetica nf
LHFFVE+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
166.813 266.095 mo
( )sh
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.193 266.095 mo
(%!)
[4.17 0 ]xsh
181.688 239.283 mo
184.25 239.283 li
442.063 239.283 mo
439.438 239.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
175.375 242.033 mo
(!)sh
181.688 215.221 mo
184.25 215.221 li
442.063 215.221 mo
439.438 215.221 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 217.97 mo
(%!)
[4.17 0 ]xsh
181.688 263.345 mo
442.063 263.345 li
181.688 215.221 mo
442.063 215.221 li
181.688 263.345 mo
181.688 215.221 li
442.063 263.345 mo
442.063 215.221 li
@
gsave
181.688 263.408 mo
442.125 263.408 li
442.125 215.221 li
181.688 215.221 li
cp
clp
1.5 lw
182.5 242.095 mo
183.375 241.783 li
184.25 241.408 li
186.875 240.658 li
188.625 240.283 li
189.437 240.158 li
190.313 240.033 li
191.188 239.908 li
192.062 239.845 li
192.938 239.783 li
195.563 239.596 li
196.438 239.533 li
197.25 239.533 li
198.125 239.47 li
201.625 239.47 li
202.5 239.408 li
204.25 239.408 li
205.063 239.47 li
209.438 239.47 li
210.313 239.533 li
212.875 239.533 li
213.75 239.596 li
214.624 239.596 li
215.5 239.658 li
216.375 239.658 li
218.125 239.783 li
219 239.783 li
219.874 239.845 li
220.688 239.908 li
221.562 239.971 li
222.437 240.033 li
223.313 240.158 li
224.188 240.22 li
225.062 240.283 li
225.938 240.408 li
226.813 240.533 li
227.625 240.658 li
228.5 240.783 li
232 241.533 li
233.75 242.033 li
234.625 242.345 li
235.438 242.658 li
237.188 243.408 li
238.063 243.845 li
238.937 244.345 li
240.688 245.47 li
242.438 246.845 li
243.25 247.595 li
244.125 248.47 li
245.875 250.345 li
247.625 252.47 li
248.5 253.658 li
249.375 254.783 li
250.25 255.97 li
251.063 257.095 li
251.938 258.158 li
252.812 259.096 li
253.688 259.908 li
254.563 260.47 li
255.437 260.783 li
256.313 260.845 li
257.188 260.596 li
258.062 260.095 li
258.875 259.283 li
259.75 258.22 li
260.625 256.97 li
261.5 255.533 li
262.375 254.033 li
263.25 252.47 li
264.125 250.846 li
265 249.283 li
265.875 247.783 li
266.687 246.346 li
267.563 245.033 li
268.438 243.783 li
269.312 242.658 li
270.188 241.658 li
271.063 240.721 li
271.937 239.845 li
272.813 239.095 li
273.625 238.408 li
275.375 237.283 li
276.25 236.783 li
277.125 236.345 li
278.875 235.595 li
280.625 234.97 li
281.438 234.658 li
282.313 234.408 li
283.187 234.095 li
285.812 233.345 li
286.688 233.033 li
288.437 232.533 li
289.25 232.22 li
292.75 230.971 li
294.5 230.221 li
295.375 229.908 li
296.25 229.471 li
297.062 229.096 li
298.813 228.346 li
299.687 227.908 li
302.312 226.783 li
304.063 226.158 li
304.875 225.845 li
305.75 225.595 li
306.625 225.408 li
307.5 225.283 li
308.375 225.158 li
310.125 225.158 li
311 225.22 li
311.875 225.408 li
312.688 225.595 li
314.438 226.096 li
317.063 227.221 li
318.812 228.095 li
319.625 228.533 li
320.5 229.033 li
322.25 229.908 li
323.125 230.283 li
324 230.72 li
324.875 231.095 li
325.75 231.408 li
326.625 231.783 li
327.437 232.033 li
328.313 232.345 li
329.188 232.533 li
330.062 232.783 li
330.938 232.97 li
331.813 233.095 li
333.563 233.345 li
334.438 233.408 li
335.25 233.408 li
336.125 233.47 li
337 233.408 li
337.875 233.408 li
338.75 233.345 li
339.625 233.283 li
340.5 233.158 li
341.375 233.033 li
342.25 232.908 li
343.063 232.72 li
343.937 232.533 li
344.813 232.283 li
345.688 232.096 li
346.562 231.783 li
347.438 231.533 li
350.063 230.596 li
350.875 230.221 li
351.75 229.846 li
352.625 229.408 li
353.5 229.033 li
354.375 228.595 li
355.25 228.22 li
357 227.345 li
357.812 226.97 li
360.437 225.845 li
361.313 225.533 li
363.062 225.033 li
364.813 224.783 li
366.5 224.783 li
368.25 225.033 li
369.125 225.283 li
370.875 225.908 li
371.75 226.283 li
372.625 226.72 li
373.438 227.158 li
376.063 228.658 li
376.937 229.096 li
378.688 230.095 li
380.438 230.971 li
381.25 231.346 li
383 232.096 li
384.75 232.72 li
385.625 232.97 li
388.25 233.533 li
389.063 233.658 li
389.938 233.783 li
390.812 233.845 li
391.688 233.908 li
393.437 233.908 li
394.313 233.845 li
396.062 233.72 li
396.875 233.658 li
397.75 233.533 li
398.625 233.345 li
399.5 233.221 li
400.375 232.97 li
401.25 232.783 li
403 232.283 li
403.813 231.97 li
406.438 231.033 li
407.312 230.658 li
408.188 230.221 li
409.063 229.846 li
410.813 228.97 li
411.625 228.533 li
412.5 228.033 li
413.375 227.596 li
414.25 227.095 li
416 226.22 li
418.625 225.095 li
419.438 224.845 li
420.313 224.596 li
422.063 224.345 li
422.937 224.345 li
423.812 224.408 li
424.688 224.533 li
425.562 224.72 li
426.437 225.033 li
427.249 225.346 li
429 226.22 li
431.625 227.72 li
434.25 229.408 li
435.062 229.908 li
435.938 230.47 li
436.812 230.908 li
437.687 231.408 li
438.563 231.845 li
440.312 232.595 li
442.062 233.221 li
.895628 .7673 0 0 cmyk
@
181.688 242.533 mo
182.5 242.095 li
@
grestore
200.27 236.913 mo
200.27 237.603 199.71 238.163 199.02 238.163 cv
198.33 238.163 197.77 237.603 197.77 236.913 cv
197.77 236.223 198.33 235.663 199.02 235.663 cv
199.71 235.663 200.27 236.223 200.27 236.913 cv
f
217.64 240.333 mo
217.64 241.023 217.08 241.583 216.39 241.583 cv
215.7 241.583 215.14 241.023 215.14 240.333 cv
215.14 239.643 215.7 239.083 216.39 239.083 cv
217.08 239.083 217.64 239.643 217.64 240.333 cv
f
235.01 240.513 mo
235.01 241.203 234.45 241.763 233.76 241.763 cv
233.07 241.763 232.51 241.203 232.51 240.513 cv
232.51 239.823 233.07 239.263 233.76 239.263 cv
234.45 239.263 235.01 239.823 235.01 240.513 cv
f
252.29 258.513 mo
252.29 259.203 251.73 259.763 251.04 259.763 cv
250.35 259.763 249.79 259.203 249.79 258.513 cv
249.79 257.823 250.35 257.263 251.04 257.263 cv
251.73 257.263 252.29 257.823 252.29 258.513 cv
f
269.66 243.663 mo
269.66 244.353 269.1 244.913 268.41 244.913 cv
267.72 244.913 267.16 244.353 267.16 243.663 cv
267.16 242.973 267.72 242.413 268.41 242.413 cv
269.1 242.413 269.66 242.973 269.66 243.663 cv
f
287.03 232.098 mo
287.03 232.788 286.47 233.348 285.78 233.348 cv
285.09 233.348 284.53 232.788 284.53 232.098 cv
284.53 231.408 285.09 230.848 285.78 230.848 cv
286.47 230.848 287.03 231.408 287.03 232.098 cv
f
304.445 223.953 mo
304.445 224.643 303.885 225.203 303.195 225.203 cv
302.505 225.203 301.945 224.643 301.945 223.953 cv
301.945 223.263 302.505 222.703 303.195 222.703 cv
303.885 222.703 304.445 223.263 304.445 223.953 cv
f
321.77 229.893 mo
321.77 230.583 321.21 231.143 320.52 231.143 cv
319.83 231.143 319.27 230.583 319.27 229.893 cv
319.27 229.203 319.83 228.643 320.52 228.643 cv
321.21 228.643 321.77 229.203 321.77 229.893 cv
f
339.14 234.213 mo
339.14 234.903 338.58 235.463 337.89 235.463 cv
337.2 235.463 336.64 234.903 336.64 234.213 cv
336.64 233.523 337.2 232.963 337.89 232.963 cv
338.58 232.963 339.14 233.523 339.14 234.213 cv
f
356.51 228.903 mo
356.51 229.593 355.95 230.153 355.26 230.153 cv
354.57 230.153 354.01 229.593 354.01 228.903 cv
354.01 228.213 354.57 227.653 355.26 227.653 cv
355.95 227.653 356.51 228.213 356.51 228.903 cv
f
373.88 225.123 mo
373.88 225.813 373.32 226.373 372.63 226.373 cv
371.94 226.373 371.38 225.813 371.38 225.123 cv
371.38 224.433 371.94 223.873 372.63 223.873 cv
373.32 223.873 373.88 224.433 373.88 225.123 cv
f
391.16 235.293 mo
391.16 235.983 390.6 236.543 389.91 236.543 cv
389.22 236.543 388.66 235.983 388.66 235.293 cv
388.66 234.603 389.22 234.043 389.91 234.043 cv
390.6 234.043 391.16 234.603 391.16 235.293 cv
f
408.53 230.433 mo
408.53 231.123 407.97 231.683 407.28 231.683 cv
406.59 231.683 406.03 231.123 406.03 230.433 cv
406.03 229.743 406.59 229.183 407.28 229.183 cv
407.97 229.183 408.53 229.743 408.53 230.433 cv
f
425.945 226.383 mo
425.945 227.073 425.385 227.633 424.695 227.633 cv
424.005 227.633 423.445 227.073 423.445 226.383 cv
423.445 225.693 424.005 225.133 424.695 225.133 cv
425.385 225.133 425.945 225.693 425.945 226.383 cv
f
443.315 229.038 mo
443.315 229.728 442.755 230.288 442.065 230.288 cv
441.375 230.288 440.815 229.728 440.815 229.038 cv
440.815 228.348 441.375 227.788 442.065 227.788 cv
442.755 227.788 443.315 228.348 443.315 229.038 cv
f
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g17 <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841
304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F530716
56420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021
F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 45 /g17 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 /g16 /g1 /g15 /g2 /g17 210{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [0 -7.5 -7.5 0 0 0 ]msf
161.687 244.783 mo
(-*+,)
[-3.75 -2.49745 -2.08499 0 ]ysh
gsave
181.688 263.408 mo
442.125 263.408 li
442.125 215.221 li
181.688 215.221 li
cp
clp
1.5 lw
181.688 245.158 mo
182.5 244.408 li
183.375 243.721 li
184.25 243.158 li
185.125 242.658 li
186 242.221 li
187.75 241.471 li
188.625 241.22 li
189.437 240.97 li
190.313 240.721 li
191.188 240.595 li
192.062 240.408 li
192.938 240.283 li
193.813 240.22 li
194.687 240.095 li
195.563 240.033 li
196.438 240.033 li
197.25 239.971 li
198.125 239.908 li
201.625 239.908 li
202.5 239.971 li
204.25 239.971 li
205.063 240.033 li
205.937 240.095 li
207.688 240.22 li
208.562 240.283 li
210.313 240.408 li
211.187 240.533 li
212.063 240.595 li
212.875 240.721 li
213.75 240.845 li
214.624 240.97 li
218.125 241.72 li
219.874 242.221 li
220.688 242.47 li
222.437 243.095 li
223.313 243.47 li
225.062 244.345 li
226.813 245.345 li
227.625 245.971 li
228.5 246.595 li
229.375 247.283 li
230.25 248.033 li
231.125 248.845 li
232 249.721 li
233.75 251.596 li
0 .990631 1 .000396735 cmyk
@
grestore
181.688 338.908 mo
442.063 338.908 li
442.063 290.72 li
181.688 290.72 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
181.688 338.908 mo
181.688 290.72 li
442.063 290.72 li
442.063 338.908 li
181.688 338.908 li
@
181.688 338.908 mo
442.063 338.908 li
181.688 290.72 mo
442.063 290.72 li
181.688 338.908 mo
181.688 290.72 li
442.063 338.908 mo
442.063 290.72 li
181.688 338.908 mo
442.063 338.908 li
181.688 338.908 mo
181.688 290.72 li
181.688 338.908 mo
181.688 336.283 li
181.688 290.72 mo
181.688 293.283 li
1 /0 /CSD get_res sepcs
1 sep
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
179.625 347.97 mo
(!)sh
225.062 338.908 mo
225.062 336.283 li
225.062 290.72 mo
225.062 293.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
219.875 347.97 mo
(!"#)
[4.17 2.08501 0 ]xsh
268.438 338.908 mo
268.438 336.283 li
268.438 290.72 mo
268.438 293.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
266.375 347.97 mo
($)sh
311.875 338.908 mo
311.875 336.283 li
311.875 290.72 mo
311.875 293.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
306.688 347.97 mo
($"#)
[4.17001 2.08499 0 ]xsh
355.25 338.908 mo
355.25 336.283 li
355.25 290.72 mo
355.25 293.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
353.188 347.97 mo
(%)sh
398.625 338.908 mo
398.625 336.283 li
398.625 290.72 mo
398.625 293.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
393.437 347.97 mo
(%"#)
[4.17001 2.08499 0 ]xsh
442.063 338.908 mo
442.063 336.283 li
442.063 290.72 mo
442.063 293.283 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
440 347.97 mo
(&)sh
181.688 338.908 mo
184.25 338.908 li
442.063 338.908 mo
439.438 338.908 li
@
LHFFVE+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
166.813 341.658 mo
( )sh
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.193 341.658 mo
('!)
[4.17 0 ]xsh
181.688 322.846 mo
184.25 322.846 li
442.063 322.846 mo
439.438 322.846 li
@
LHFFVE+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
166.813 325.595 mo
( )sh
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.193 325.595 mo
(%!)
[4.17 0 ]xsh
181.688 306.783 mo
184.25 306.783 li
442.063 306.783 mo
439.438 306.783 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
175.375 309.533 mo
(!)sh
181.688 290.72 mo
184.25 290.72 li
442.063 290.72 mo
439.438 290.72 li
@
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 293.47 mo
(%!)
[4.17 0 ]xsh
181.688 338.908 mo
442.063 338.908 li
181.688 290.72 mo
442.063 290.72 li
181.688 338.908 mo
181.688 290.72 li
442.063 338.908 mo
442.063 290.72 li
@
gsave
181.688 338.971 mo
442.125 338.971 li
442.125 290.721 li
181.688 290.721 li
cp
clp
1.5 lw
182.5 306.033 mo
186 306.283 li
186.875 306.283 li
188.625 306.408 li
189.437 306.47 li
190.313 306.533 li
191.188 306.533 li
192.062 306.595 li
192.938 306.595 li
193.813 306.658 li
194.687 306.658 li
195.563 306.721 li
197.25 306.721 li
198.125 306.783 li
199.875 306.783 li
200.75 306.845 li
203.375 306.845 li
204.25 306.908 li
205.937 306.908 li
206.813 306.97 li
208.562 306.97 li
209.438 307.033 li
211.187 307.033 li
212.063 307.096 li
212.875 307.096 li
214.624 307.22 li
215.5 307.22 li
219.874 307.533 li
220.688 307.595 li
221.562 307.658 li
223.313 307.908 li
224.188 307.97 li
225.062 308.095 li
225.938 308.283 li
226.813 308.408 li
227.625 308.596 li
228.5 308.783 li
229.375 309.033 li
230.25 309.22 li
231.125 309.533 li
232 309.783 li
232.875 310.096 li
234.625 310.846 li
235.438 311.345 li
236.312 311.783 li
238.063 312.908 li
239.813 314.283 li
240.688 315.033 li
242.438 316.783 li
243.25 317.72 li
245.875 320.908 li
246.75 322.033 li
247.625 323.095 li
248.5 324.033 li
249.375 324.908 li
250.25 325.595 li
251.063 326.033 li
251.938 326.095 li
252.812 325.846 li
253.688 325.158 li
254.563 324.033 li
255.437 322.471 li
256.313 320.596 li
257.188 318.47 li
258.062 316.158 li
258.875 313.846 li
259.75 311.596 li
260.625 309.595 li
261.5 307.783 li
262.375 306.22 li
263.25 304.97 li
264.125 303.97 li
265 303.22 li
265.875 302.658 li
266.687 302.283 li
267.563 302.033 li
268.438 301.908 li
269.312 301.846 li
270.188 301.783 li
271.063 301.783 li
271.937 301.846 li
272.813 301.908 li
273.625 301.97 li
274.5 301.97 li
275.375 302.033 li
278 302.033 li
278.875 301.97 li
279.75 301.97 li
280.625 301.846 li
281.438 301.783 li
284.063 301.408 li
286.688 300.845 li
288.437 300.346 li
289.25 300.095 li
290.125 299.845 li
296.25 297.658 li
297.062 297.346 li
300.563 296.345 li
302.312 296.095 li
304.063 295.97 li
304.875 296.033 li
305.75 296.158 li
306.625 296.345 li
307.5 296.596 li
308.375 296.908 li
310.125 297.658 li
311 298.158 li
311.875 298.595 li
312.688 299.095 li
313.562 299.596 li
314.438 300.158 li
315.313 300.595 li
316.187 301.096 li
317.063 301.533 li
318.812 302.283 li
319.625 302.596 li
320.5 302.908 li
321.375 303.158 li
323.125 303.533 li
324 303.658 li
326.625 303.845 li
327.437 303.845 li
328.313 303.783 li
329.188 303.783 li
330.938 303.658 li
331.813 303.533 li
332.687 303.47 li
334.438 303.22 li
335.25 303.033 li
336.125 302.908 li
339.625 302.158 li
342.25 301.408 li
343.063 301.158 li
343.937 300.908 li
347.438 299.658 li
348.313 299.283 li
349.187 298.97 li
350.063 298.595 li
350.875 298.283 li
352.625 297.533 li
356.125 296.283 li
357 296.033 li
357.812 295.846 li
358.688 295.72 li
360.437 295.595 li
361.313 295.658 li
362.188 295.783 li
363.938 296.283 li
364.813 296.658 li
365.625 297.033 li
367.375 298.033 li
370.875 300.283 li
371.75 300.783 li
372.625 301.345 li
373.438 301.783 li
374.312 302.221 li
376.063 302.971 li
376.937 303.283 li
377.813 303.533 li
379.562 303.908 li
380.438 304.033 li
381.25 304.096 li
383 304.22 li
383.875 304.22 li
384.75 304.158 li
385.625 304.158 li
386.5 304.096 li
387.375 303.97 li
388.25 303.908 li
389.063 303.783 li
389.938 303.658 li
391.688 303.408 li
393.437 303.033 li
394.313 302.908 li
395.188 302.658 li
396.062 302.47 li
396.875 302.221 li
397.75 302.033 li
398.625 301.783 li
399.5 301.471 li
400.375 301.22 li
403 300.283 li
403.813 299.908 li
404.687 299.596 li
406.438 298.846 li
407.312 298.408 li
410.813 296.908 li
411.625 296.533 li
412.5 296.158 li
413.375 295.908 li
414.25 295.595 li
415.125 295.408 li
416.875 295.158 li
417.75 295.158 li
418.625 295.22 li
419.438 295.408 li
420.313 295.658 li
422.063 296.408 li
422.937 296.908 li
424.688 298.033 li
425.562 298.658 li
426.437 299.345 li
427.249 299.971 li
428.125 300.595 li
430.75 302.283 li
431.625 302.72 li
433.375 303.47 li
434.25 303.783 li
435.062 304.033 li
436.812 304.408 li
437.687 304.471 li
438.563 304.595 li
439.437 304.595 li
440.312 304.658 li
441.188 304.595 li
442.062 304.595 li
.895628 .7673 0 0 cmyk
@
181.688 305.971 mo
182.5 306.033 li
@
grestore
200.27 305.763 mo
200.27 306.453 199.71 307.013 199.02 307.013 cv
198.33 307.013 197.77 306.453 197.77 305.763 cv
197.77 305.073 198.33 304.513 199.02 304.513 cv
199.71 304.513 200.27 305.073 200.27 305.763 cv
f
217.64 307.203 mo
217.64 307.893 217.08 308.453 216.39 308.453 cv
215.7 308.453 215.14 307.893 215.14 307.203 cv
215.14 306.513 215.7 305.953 216.39 305.953 cv
217.08 305.953 217.64 306.513 217.64 307.203 cv
f
235.01 310.623 mo
235.01 311.313 234.45 311.873 233.76 311.873 cv
233.07 311.873 232.51 311.313 232.51 310.623 cv
232.51 309.933 233.07 309.373 233.76 309.373 cv
234.45 309.373 235.01 309.933 235.01 310.623 cv
f
252.29 325.968 mo
252.29 326.658 251.73 327.218 251.04 327.218 cv
250.35 327.218 249.79 326.658 249.79 325.968 cv
249.79 325.278 250.35 324.718 251.04 324.718 cv
251.73 324.718 252.29 325.278 252.29 325.968 cv
f
269.66 301.218 mo
269.66 301.908 269.1 302.468 268.41 302.468 cv
267.72 302.468 267.16 301.908 267.16 301.218 cv
267.16 300.528 267.72 299.968 268.41 299.968 cv
269.1 299.968 269.66 300.528 269.66 301.218 cv
f
287.03 300.813 mo
287.03 301.503 286.47 302.063 285.78 302.063 cv
285.09 302.063 284.53 301.503 284.53 300.813 cv
284.53 300.123 285.09 299.563 285.78 299.563 cv
286.47 299.563 287.03 300.123 287.03 300.813 cv
f
304.445 295.098 mo
304.445 295.788 303.885 296.348 303.195 296.348 cv
302.505 296.348 301.945 295.788 301.945 295.098 cv
301.945 294.408 302.505 293.848 303.195 293.848 cv
303.885 293.848 304.445 294.408 304.445 295.098 cv
f
321.77 303.288 mo
321.77 303.978 321.21 304.538 320.52 304.538 cv
319.83 304.538 319.27 303.978 319.27 303.288 cv
319.27 302.598 319.83 302.038 320.52 302.038 cv
321.21 302.038 321.77 302.598 321.77 303.288 cv
f
339.14 303.513 mo
339.14 304.203 338.58 304.763 337.89 304.763 cv
337.2 304.763 336.64 304.203 336.64 303.513 cv
336.64 302.823 337.2 302.263 337.89 302.263 cv
338.58 302.263 339.14 302.823 339.14 303.513 cv
f
356.51 296.403 mo
356.51 297.093 355.95 297.653 355.26 297.653 cv
354.57 297.653 354.01 297.093 354.01 296.403 cv
354.01 295.713 354.57 295.153 355.26 295.153 cv
355.95 295.153 356.51 295.713 356.51 296.403 cv
f
373.88 301.713 mo
373.88 302.403 373.32 302.963 372.63 302.963 cv
371.94 302.963 371.38 302.403 371.38 301.713 cv
371.38 301.023 371.94 300.463 372.63 300.463 cv
373.32 300.463 373.88 301.023 373.88 301.713 cv
f
391.16 303.873 mo
391.16 304.563 390.6 305.123 389.91 305.123 cv
389.22 305.123 388.66 304.563 388.66 303.873 cv
388.66 303.183 389.22 302.623 389.91 302.623 cv
390.6 302.623 391.16 303.183 391.16 303.873 cv
f
408.53 298.383 mo
408.53 299.073 407.97 299.633 407.28 299.633 cv
406.59 299.633 406.03 299.073 406.03 298.383 cv
406.03 297.693 406.59 297.133 407.28 297.133 cv
407.97 297.133 408.53 297.693 408.53 298.383 cv
f
425.945 298.293 mo
425.945 298.983 425.385 299.543 424.695 299.543 cv
424.005 299.543 423.445 298.983 423.445 298.293 cv
423.445 297.603 424.005 297.043 424.695 297.043 cv
425.385 297.043 425.945 297.603 425.945 298.293 cv
f
443.315 304.503 mo
443.315 305.193 442.755 305.753 442.065 305.753 cv
441.375 305.753 440.815 305.193 440.815 304.503 cv
440.815 303.813 441.375 303.253 442.065 303.253 cv
442.755 303.253 443.315 303.813 443.315 304.503 cv
f
true set_gvm
%ADOBeginSubsetFont: YBAAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVD+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g18 <1C60D8A8C9B7A73DEABE54629387A84F059D312ADC9A1BC62C3E425E4C
57824FE89DFBD64BF53A53> |-
/g14 <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522C
E1F006> |-
/g12 <1C60D8A8C9B854D0EE4B20327A907C36187261> |-
/g13 <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E
6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42
F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-
/g11 <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29
F8D56A4237858E054C3198877A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVD+Helvetica /Encoding get
dup 46 /g18 put
dup 47 /g14 put
dup 48 /g12 put
dup 49 /g13 put
dup 50 /g11 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVD+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 /g16 /g1 /g15 /g2 /g17 /g18 /g14 
/g12 /g13 /g11 205{/.notdef}rp]
LHFFVD+Helvetica nf
LHFFVD+Helvetica*1 [0 -7.5 -7.5 0 0 0 ]msf
161.687 320.283 mo
(.*+,)
[-3.75 -2.49747 -2.08499 0 ]ysh
LHFFVD+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
302.875 356.908 mo
(/012)
[4.58243 2.08499 6.24747 0 ]xsh
gsave
181.688 338.971 mo
442.125 338.971 li
442.125 290.721 li
181.688 290.721 li
cp
clp
1.5 lw
181.688 305.345 mo
182.5 305.47 li
186.875 306.095 li
187.75 306.158 li
188.625 306.283 li
189.437 306.408 li
190.313 306.47 li
191.188 306.533 li
192.062 306.658 li
196.438 306.97 li
197.25 307.033 li
198.125 307.096 li
199 307.096 li
204.25 307.471 li
205.063 307.533 li
205.937 307.658 li
207.688 307.783 li
209.438 308.033 li
210.313 308.095 li
211.187 308.283 li
212.063 308.408 li
212.875 308.533 li
215.5 309.095 li
218.125 309.845 li
219.874 310.471 li
220.688 310.846 li
223.313 312.158 li
225.062 313.283 li
225.938 313.908 li
226.813 314.596 li
227.625 315.346 li
228.5 316.096 li
230.25 317.845 li
232 319.72 li
232.875 320.72 li
233.75 321.658 li
0 .990631 1 .000396735 cmyk
@
grestore
gsave
138.045 626.59 mo
474 626.59 li
474 374.528 li
138.045 374.528 li
cp
clp
138 626.653 mo
474.062 626.653 li
474.062 374.528 li
138 374.528 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
grestore
181.688 441.591 mo
442.063 441.591 li
442.063 393.403 li
181.688 393.403 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
181.688 441.591 mo
181.688 393.403 li
442.063 393.403 li
442.063 441.591 li
181.688 441.591 li
@
181.688 441.591 mo
442.063 441.591 li
181.688 393.403 mo
442.063 393.403 li
181.688 441.591 mo
181.688 393.403 li
442.063 441.591 mo
442.063 393.403 li
181.688 441.591 mo
442.063 441.591 li
181.688 441.591 mo
181.688 393.403 li
181.688 441.591 mo
181.688 438.966 li
181.688 393.403 mo
181.688 395.965 li
1 /0 /CSD get_res sepcs
1 sep
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OICAAA+Helvetica def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /g4 put
def
/FontBBox {-951 -481 1446 1122} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E6
48A7CA97DB1343CA> |-
/g4 <1C60D8A8C9B7EF322BB70D1045F9F84CF5A9E636DA48B0B84345CFB17CD
CD64AA529BD23C358113A6F12A7F927F67801E7716DEDB8FBB50D28956279879
C3943A67386E5304D963AB3E064E7022317006AA79A8777799C5D39502A7CB33
0EAEEC28837821C5437B109C741C1D7BCD8EEC785ED017624EE945A52A677F5B
0E3B0C4781A3901> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica /OICAAA+Helvetica findfont ct_VMDictPut
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 222{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
179.625 450.653 mo
(!)sh
225.062 441.591 mo
225.062 438.966 li
225.062 393.403 mo
225.062 395.965 li
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g3 <1C60D8A8C9B854D0E3687C43D46768E11610> |-
/g9 <1C60D8A8C9B7EF3277A9C7C54B35CB479E4C110330EAD203F40A2082641
4A4CC0E90EF4AAF68DCFEF4ABE6CFF07A7C5FBDADC90A7F87ECB382B602F5645
1722980F3A3AC74E582BA9C9CEC3027EC489F453112D8FBBD217B656538AC90D
034F616E885784C813B1555F6DEF92ECF082193A9672305F8A984DE35F68D150
2A8C10EB08C528E24E38813C68D1F86D01BCA9E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 34 /g3 put
dup 35 /g9 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 220{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
219.875 450.653 mo
(!"#)
[4.17 2.08501 0 ]xsh
268.438 441.591 mo
268.438 438.966 li
268.438 393.403 mo
268.438 395.965 li
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g5 <1C60D8A8C9B7EF322B8DEEDAE6F72EF3709E16C7A593AF17F17D72A3907
C7468090579C66DE0263BFE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 36 /g5 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 219{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
266.375 450.653 mo
($)sh
311.875 441.591 mo
311.875 438.966 li
311.875 393.403 mo
311.875 395.965 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
306.688 450.653 mo
($"#)
[4.17001 2.08499 0 ]xsh
355.25 441.591 mo
355.25 438.966 li
355.25 393.403 mo
355.25 395.965 li
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g6 <1C60D8A8C9B7EF327699F81B0CD59DC4BD38D48AF11B5B9C1D7787A22BD
C09D7BCED9A76C2312055A28AC829584109043EE366AF8632D6D62E9BBD6A435
7093750D4015EA59C9F538C44C55AD0DB14FEE0C7267845EB7EFBD514024AA1A
03530A8941AD7B5F508335B2FDCA37E6B0627146A6F144DB9DD7DCA6BE86290F
B46DD6A2918F4C2C2BDEECA159D78> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 37 /g6 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 218{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
353.188 450.653 mo
(%)sh
398.625 441.591 mo
398.625 438.966 li
398.625 393.403 mo
398.625 395.965 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
393.437 450.653 mo
(%"#)
[4.17001 2.08499 0 ]xsh
442.063 441.591 mo
442.063 438.966 li
442.063 393.403 mo
442.063 395.965 li
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g7 <1C60D8A8C9B7EF322B8D6E3793F9C339FF2D01F55F75395A69A42725328
E1B8E66EAFF6BAC335B6E345906CE7152DDCE6F991DD2E99A50D14EF5FE71686
4AD89B92005EB56184F6465E294CACBF73EC4E77A27D9ACFF3348FE551D23745
FD8C1F5363E223D2FE146B2E36748D97805004E8C37168D3D6622BBF76ADD739
801325A4BB7457A49C531154E36C58F381AB30F164CAE6510100AF5FE6405CBE
42D3AEC01131A86CADB27645F055DEC901ADBC964660F336098380F7A314362D
92502B680C534E053458ABD592A4A4D87F9589307764B161F9884> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 38 /g7 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 217{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
440 450.653 mo
(&)sh
181.688 441.591 mo
184.25 441.591 li
442.063 441.591 mo
439.438 441.591 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
175.375 444.34 mo
(!)sh
181.688 425.528 mo
184.25 425.528 li
442.063 425.528 mo
439.438 425.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 428.278 mo
(%!)
[4.17 0 ]xsh
181.688 409.465 mo
184.25 409.465 li
442.063 409.465 mo
439.438 409.465 li
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g8 <1C60D8A8C9B7EF32298E3DD46F18108137336D1A5C627A90D059BB18158
BA2A55FF5DE20CE460964DAF45C08A7D9820A784F4A44F7E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 39 /g8 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
216{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 412.215 mo
('!)
[4.17 0 ]xsh
181.688 393.403 mo
184.25 393.403 li
442.063 393.403 mo
439.438 393.403 li
@
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g10 <1C60D8A8C9B7EF322BACEC3D6ABEF2D493EDC493AA22ED42125C47DF23
96DE843240A24151C3116F0DCEE068EC75B404A70B0E3A92C2307D093030C4F0
8B5CC0A75F4F4D7C70C5CD3B07E718D5DA84710CE02FF093BE8B5ED477F329DF
9AC8554D46651B2A99890C549B5152AB0899BB31DC610CEE59FE1F4C3BE037BF
F7F7AE7EDC6D596E9E9398287209A7C703150F7EA84F1C65DCD68CCC47A3B7F9
EF77F610D53784F89B61AB4160F9D214F618A6C0032B66C3DB575FE49E073B7A
B1C1C6CA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 40 /g10 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 215{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 396.153 mo
(\(!)
[4.17 0 ]xsh
181.688 441.591 mo
442.063 441.591 li
181.688 393.403 mo
442.063 393.403 li
181.688 441.591 mo
181.688 393.403 li
442.063 441.591 mo
442.063 393.403 li
@
gsave
181.688 441.653 mo
442.125 441.653 li
442.125 393.403 li
181.688 393.403 li
cp
clp
1.5 lw
182.5 420.778 mo
184.25 421.903 li
187.75 423.903 li
188.625 424.341 li
189.437 424.84 li
191.188 425.715 li
192.062 426.09 li
192.938 426.528 li
196.438 428.028 li
197.25 428.403 li
198.125 428.715 li
199 429.09 li
203.375 430.653 li
204.25 430.903 li
205.063 431.215 li
206.813 431.715 li
207.688 432.028 li
208.562 432.278 li
209.438 432.465 li
212.063 433.215 li
212.875 433.403 li
213.75 433.653 li
219.874 434.965 li
220.688 435.153 li
221.562 435.278 li
222.437 435.465 li
223.313 435.591 li
224.188 435.778 li
225.062 435.903 li
225.938 436.028 li
226.813 436.153 li
227.625 436.278 li
229.375 436.528 li
230.25 436.59 li
231.125 436.716 li
232 436.778 li
233.75 436.903 li
236.312 436.903 li
238.063 436.778 li
238.937 436.59 li
239.813 436.465 li
240.688 436.215 li
242.438 435.465 li
243.25 434.903 li
244.125 434.278 li
245 433.465 li
245.875 432.465 li
246.75 431.34 li
247.625 429.966 li
248.5 428.34 li
249.375 426.528 li
250.25 424.465 li
251.063 422.215 li
251.938 419.778 li
252.812 417.278 li
253.688 414.84 li
254.563 412.465 li
255.437 410.34 li
256.313 408.528 li
257.188 407.153 li
258.062 406.215 li
258.875 405.778 li
259.75 405.715 li
260.625 406.09 li
261.5 406.778 li
262.375 407.653 li
264.125 409.778 li
265.875 412.028 li
266.687 413.028 li
267.563 414.028 li
268.438 414.966 li
269.312 415.84 li
270.188 416.653 li
271.937 418.028 li
272.813 418.653 li
273.625 419.278 li
276.25 420.778 li
278 421.653 li
279.75 422.403 li
280.625 422.715 li
281.438 423.028 li
282.313 423.34 li
284.938 424.09 li
285.812 424.278 li
286.688 424.403 li
287.563 424.59 li
288.437 424.653 li
289.25 424.778 li
291.875 424.778 li
292.75 424.716 li
293.625 424.59 li
294.5 424.465 li
296.25 423.966 li
297.062 423.715 li
298.813 422.965 li
300.563 422.091 li
301.438 421.59 li
304.063 419.903 li
304.875 419.278 li
305.75 418.653 li
307.5 417.528 li
309.25 416.528 li
311 415.778 li
311.875 415.528 li
312.688 415.278 li
313.562 415.153 li
314.438 415.09 li
315.313 415.153 li
316.187 415.215 li
317.063 415.341 li
318.812 415.84 li
319.625 416.091 li
320.5 416.466 li
321.375 416.778 li
322.25 417.153 li
323.125 417.591 li
324 417.966 li
324.875 418.403 li
325.75 418.778 li
326.625 419.215 li
327.437 419.59 li
328.313 420.028 li
329.188 420.403 li
330.062 420.84 li
332.687 421.965 li
333.563 422.278 li
334.438 422.653 li
335.25 422.965 li
337 423.591 li
340.5 424.59 li
341.375 424.778 li
342.25 424.903 li
343.063 425.091 li
343.937 425.215 li
345.688 425.34 li
346.562 425.403 li
347.438 425.403 li
348.313 425.34 li
349.187 425.278 li
350.063 425.153 li
350.875 424.965 li
352.625 424.465 li
353.5 424.153 li
354.375 423.778 li
356.125 422.903 li
357 422.34 li
357.812 421.778 li
358.688 421.215 li
359.563 420.528 li
360.437 419.903 li
361.313 419.215 li
362.188 418.59 li
363.062 417.903 li
363.938 417.278 li
364.813 416.715 li
365.625 416.215 li
367.375 415.341 li
369.125 414.84 li
370 414.715 li
370.875 414.653 li
371.75 414.715 li
372.625 414.84 li
373.438 415.028 li
375.188 415.528 li
376.063 415.84 li
376.937 416.215 li
377.813 416.653 li
378.688 417.028 li
380.438 417.903 li
381.25 418.341 li
382.125 418.778 li
383 419.278 li
384.75 420.153 li
385.625 420.528 li
387.375 421.403 li
388.25 421.778 li
389.063 422.153 li
390.812 422.903 li
391.688 423.216 li
392.563 423.591 li
393.437 423.903 li
394.313 424.153 li
395.188 424.465 li
396.062 424.716 li
396.875 424.965 li
397.75 425.215 li
398.625 425.403 li
399.5 425.59 li
401.25 425.841 li
402.125 425.903 li
403 425.965 li
403.813 426.028 li
405.563 425.903 li
406.438 425.841 li
408.188 425.466 li
409.063 425.215 li
410.813 424.59 li
411.625 424.153 li
413.375 423.153 li
415.125 421.903 li
416.875 420.528 li
418.625 419.028 li
419.438 418.278 li
420.313 417.528 li
421.187 416.841 li
422.063 416.215 li
422.937 415.653 li
423.812 415.153 li
424.688 414.778 li
425.562 414.465 li
426.437 414.278 li
427.249 414.153 li
428.125 414.153 li
429 414.278 li
429.874 414.403 li
430.75 414.653 li
432.499 415.278 li
433.375 415.653 li
434.25 416.091 li
435.062 416.528 li
435.938 417.028 li
436.812 417.465 li
438.563 418.465 li
439.437 418.903 li
441.188 419.903 li
442.062 420.34 li
.895628 .7673 0 0 cmyk
@
181.688 420.216 mo
182.5 420.778 li
@
grestore
217.64 433.778 mo
217.64 434.468 217.08 435.028 216.39 435.028 cv
215.7 435.028 215.14 434.468 215.14 433.778 cv
215.14 433.088 215.7 432.528 216.39 432.528 cv
217.08 432.528 217.64 433.088 217.64 433.778 cv
f
235.01 435.938 mo
235.01 436.628 234.45 437.188 233.76 437.188 cv
233.07 437.188 232.51 436.628 232.51 435.938 cv
232.51 435.248 233.07 434.688 233.76 434.688 cv
234.45 434.688 235.01 435.248 235.01 435.938 cv
f
252.29 421.268 mo
252.29 421.958 251.73 422.518 251.04 422.518 cv
250.35 422.518 249.79 421.958 249.79 421.268 cv
249.79 420.578 250.35 420.018 251.04 420.018 cv
251.73 420.018 252.29 420.578 252.29 421.268 cv
f
269.66 414.968 mo
269.66 415.658 269.1 416.218 268.41 416.218 cv
267.72 416.218 267.16 415.658 267.16 414.968 cv
267.16 414.278 267.72 413.718 268.41 413.718 cv
269.1 413.718 269.66 414.278 269.66 414.968 cv
f
287.03 424.463 mo
287.03 425.153 286.47 425.713 285.78 425.713 cv
285.09 425.713 284.53 425.153 284.53 424.463 cv
284.53 423.773 285.09 423.213 285.78 423.213 cv
286.47 423.213 287.03 423.773 287.03 424.463 cv
f
304.445 420.998 mo
304.445 421.688 303.885 422.248 303.195 422.248 cv
302.505 422.248 301.945 421.688 301.945 420.998 cv
301.945 420.308 302.505 419.748 303.195 419.748 cv
303.885 419.748 304.445 420.308 304.445 420.998 cv
f
321.77 417.038 mo
321.77 417.728 321.21 418.288 320.52 418.288 cv
319.83 418.288 319.27 417.728 319.27 417.038 cv
319.27 416.348 319.83 415.788 320.52 415.788 cv
321.21 415.788 321.77 416.348 321.77 417.038 cv
f
339.14 423.878 mo
339.14 424.568 338.58 425.128 337.89 425.128 cv
337.2 425.128 336.64 424.568 336.64 423.878 cv
336.64 423.188 337.2 422.628 337.89 422.628 cv
338.58 422.628 339.14 423.188 339.14 423.878 cv
f
356.51 424.643 mo
356.51 425.333 355.95 425.893 355.26 425.893 cv
354.57 425.893 354.01 425.333 354.01 424.643 cv
354.01 423.953 354.57 423.393 355.26 423.393 cv
355.95 423.393 356.51 423.953 356.51 424.643 cv
f
373.88 414.023 mo
373.88 414.713 373.32 415.273 372.63 415.273 cv
371.94 415.273 371.38 414.713 371.38 414.023 cv
371.38 413.333 371.94 412.773 372.63 412.773 cv
373.32 412.773 373.88 413.333 373.88 414.023 cv
f
391.16 423.338 mo
391.16 424.028 390.6 424.588 389.91 424.588 cv
389.22 424.588 388.66 424.028 388.66 423.338 cv
388.66 422.648 389.22 422.088 389.91 422.088 cv
390.6 422.088 391.16 422.648 391.16 423.338 cv
f
408.53 424.418 mo
408.53 425.108 407.97 425.668 407.28 425.668 cv
406.59 425.668 406.03 425.108 406.03 424.418 cv
406.03 423.728 406.59 423.168 407.28 423.168 cv
407.97 423.168 408.53 423.728 408.53 424.418 cv
f
425.945 416.588 mo
425.945 417.278 425.385 417.838 424.695 417.838 cv
424.005 417.838 423.445 417.278 423.445 416.588 cv
423.445 415.898 424.005 415.338 424.695 415.338 cv
425.385 415.338 425.945 415.898 425.945 416.588 cv
f
443.315 420.458 mo
443.315 421.148 442.755 421.708 442.065 421.708 cv
441.375 421.708 440.815 421.148 440.815 420.458 cv
440.815 419.768 441.375 419.208 442.065 419.208 cv
442.755 419.208 443.315 419.768 443.315 420.458 cv
f
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g16 <1C60D8A8C9B7A73DB974843DC052273B2236A049EB6E5FE1C55CD985D3
062CB5B3D8A046808C9F7D76A5170CE8699B434328F999D97554357E6BC34F04
69> |-
/g1 <1C60D8A8C9B81F2C3A3BDBA2E9DFEE10E6670AEBC7475A54CE0B91C398F
722701ECC7FFACD7325FD69C372628B8FE38CA7FCBE37C8CC6151D955D330AD2
38F5A7ADFF3EC6F792676AC012B90C4C6A5CC37C0C314284064> |-
/g15 <1C60D8A8C9B854D0DE8EB299D76AFE3A3E7733E2D967660702D2EB0653
7F4BAA1F2129056DC9771C91484E3F22B637802F61054AB3D0E9902E08C4E6B9
ADDC0E2F51D38CAD652B2A777D9304919B1B524DD7CC56553E03BE971752FD01
61CF> |-
/g2 <1C60D8A8C9B81F2C240532A9306D88FBE802946D4D7C96BED003DF2FCDB
8DDB235CA368A4FADF1D0309B087452F4DD7B6CF26A6C550E92B406C8BCDB536
5991B0FCCD46328F398E95D059281A86422A9CC2837C1B0EF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 41 /g16 put
dup 42 /g1 put
dup 43 /g15 put
dup 44 /g2 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 /g16 /g1 /g15 /g2 211{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [0 -7.5 -7.5 0 0 0 ]msf
166.063 422.965 mo
(\)*+,)
[-3.75 -2.49744 -2.08499 0 ]ysh
gsave
181.688 441.653 mo
442.125 441.653 li
442.125 393.403 li
181.688 393.403 li
cp
clp
1.5 lw
181.688 420.216 mo
182.5 420.778 li
183.375 421.341 li
187.75 423.84 li
188.625 424.278 li
189.437 424.716 li
192.062 426.028 li
192.938 426.403 li
193.813 426.84 li
195.563 427.59 li
196.438 427.903 li
197.25 428.278 li
198.125 428.59 li
199 428.965 li
203.375 430.528 li
204.25 430.778 li
205.063 431.091 li
211.187 432.84 li
212.063 433.028 li
212.875 433.278 li
214.624 433.653 li
215.5 433.903 li
219 434.653 li
219.874 434.778 li
220.688 434.965 li
221.562 435.153 li
222.437 435.278 li
223.313 435.465 li
224.188 435.591 li
226.813 435.966 li
227.625 436.09 li
228.5 436.215 li
229.375 436.278 li
230.25 436.403 li
231.125 436.465 li
232 436.528 li
235.438 436.528 li
236.312 436.465 li
237.188 436.341 li
238.937 435.966 li
239.813 435.653 li
240.688 435.278 li
241.562 434.841 li
242.438 434.215 li
243.25 433.528 li
244.125 432.653 li
245 431.653 li
245.875 430.403 li
246.75 428.965 li
247.625 427.341 li
248.5 425.466 li
249.375 423.403 li
250.25 421.215 li
251.063 418.903 li
252.812 414.153 li
253.688 411.966 li
254.563 410.028 li
255.437 408.465 li
256.313 407.278 li
257.188 406.465 li
258.062 406.153 li
258.875 406.215 li
259.75 406.653 li
260.625 407.34 li
261.5 408.216 li
262.375 409.215 li
265 412.403 li
265.875 413.403 li
266.687 414.403 li
268.438 416.153 li
270.188 417.653 li
271.063 418.341 li
271.937 418.965 li
272.813 419.528 li
273.625 420.09 li
274.5 420.591 li
277.125 421.903 li
279.75 423.028 li
280.625 423.34 li
281.438 423.591 li
282.313 423.903 li
283.187 424.153 li
284.063 424.341 li
284.938 424.59 li
285.812 424.716 li
286.688 424.903 li
287.563 425.028 li
288.437 425.091 li
289.25 425.153 li
291 425.153 li
292.75 425.028 li
293.625 424.84 li
294.5 424.716 li
296.25 424.215 li
297.062 423.84 li
297.938 423.528 li
299.687 422.653 li
300.563 422.091 li
301.438 421.59 li
302.312 421.028 li
304.063 419.778 li
304.875 419.153 li
305.75 418.528 li
308.375 416.841 li
310.125 415.965 li
311 415.59 li
311.813 415.341 li
312.688 415.153 li
313.562 415.028 li
314.438 414.966 li
315.313 415.028 li
317.063 415.278 li
318.812 415.778 li
319.625 416.091 li
323.125 417.591 li
325.75 418.903 li
326.625 419.278 li
327.437 419.715 li
328.313 420.153 li
329.188 420.528 li
330.062 420.966 li
333.563 422.466 li
334.438 422.778 li
335.25 423.153 li
337 423.778 li
337.875 424.028 li
338.75 424.341 li
339.625 424.59 li
340.5 424.778 li
341.375 425.028 li
342.25 425.215 li
343.063 425.403 li
343.937 425.528 li
344.813 425.653 li
347.438 425.841 li
348.313 425.841 li
350.063 425.715 li
350.875 425.59 li
351.75 425.403 li
353.5 424.903 li
354.375 424.59 li
355.25 424.215 li
356.125 423.778 li
357 423.278 li
357.812 422.778 li
360.437 420.903 li
363.062 418.84 li
363.938 418.09 li
364.813 417.465 li
365.625 416.841 li
366.5 416.278 li
367.375 415.778 li
368.25 415.341 li
369.125 414.966 li
370 414.715 li
371.75 414.465 li
372.625 414.528 li
373.438 414.591 li
375.188 414.966 li
376.937 415.59 li
377.813 415.965 li
380.438 417.278 li
381.25 417.715 li
383 418.59 li
383.875 419.091 li
388.25 421.278 li
389.063 421.716 li
393.437 423.591 li
396.062 424.528 li
396.875 424.84 li
399.5 425.59 li
402.125 426.153 li
403 426.278 li
403.813 426.403 li
405.563 426.528 li
407.312 426.528 li
408.188 426.465 li
409.063 426.34 li
409.937 426.216 li
410.813 425.965 li
411.625 425.715 li
412.5 425.403 li
413.375 425.028 li
414.25 424.59 li
415.125 424.09 li
416 423.528 li
416.875 422.903 li
418.625 421.528 li
419.438 420.778 li
422.063 418.341 li
423.812 416.841 li
424.688 416.153 li
0 .990631 1 .000396735 cmyk
@
grestore
181.688 517.091 mo
442.063 517.091 li
442.063 468.966 li
181.688 468.966 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
181.688 517.09 mo
181.688 468.966 li
442.063 468.966 li
442.063 517.09 li
181.688 517.09 li
@
181.688 517.09 mo
442.063 517.09 li
181.688 468.966 mo
442.063 468.966 li
181.688 517.09 mo
181.688 468.966 li
442.063 517.09 mo
442.063 468.966 li
181.688 517.09 mo
442.063 517.09 li
181.688 517.09 mo
181.688 468.966 li
181.688 517.09 mo
181.688 514.465 li
181.688 468.966 mo
181.688 471.528 li
1 /0 /CSD get_res sepcs
1 sep
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
179.625 526.153 mo
(!)sh
225.062 517.09 mo
225.062 514.465 li
225.062 468.966 mo
225.062 471.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
219.875 526.153 mo
(!"#)
[4.17 2.08501 0 ]xsh
268.438 517.09 mo
268.438 514.465 li
268.438 468.966 mo
268.438 471.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
266.375 526.153 mo
($)sh
311.875 517.09 mo
311.875 514.465 li
311.875 468.966 mo
311.875 471.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
306.688 526.153 mo
($"#)
[4.17001 2.08499 0 ]xsh
355.25 517.09 mo
355.25 514.465 li
355.25 468.966 mo
355.25 471.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
353.188 526.153 mo
(%)sh
398.625 517.09 mo
398.625 514.465 li
398.625 468.966 mo
398.625 471.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
393.437 526.153 mo
(%"#)
[4.17001 2.08499 0 ]xsh
442.063 517.09 mo
442.063 514.465 li
442.063 468.966 mo
442.063 471.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
440 526.153 mo
(&)sh
181.688 517.09 mo
184.25 517.09 li
442.063 517.09 mo
439.438 517.09 li
@
true set_gvm
%ADOBeginSubsetFont: LOLBAA+Helvetica Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LOLBAA+Helvetica def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g1 put
def
/FontBBox {-951 -481 1446 1122} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B66F631635D26BA635582B3FDE9B3DD75794781396E6
48A7CA97DB1343CA> |-
/g1 <1C60D8A8C9B7F374C6243061E982D378A14DF0A305> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/LHFFVG+Helvetica /LOLBAA+Helvetica findfont ct_VMDictPut
/LHFFVG+Helvetica*1 
[32{/.notdef}rp /g1 223{/.notdef}rp]
LHFFVG+Helvetica nf
LHFFVG+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
166.813 519.84 mo
( )sh
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.193 519.84 mo
(%!)
[4.17 0 ]xsh
181.688 493.028 mo
184.25 493.028 li
442.063 493.028 mo
439.438 493.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
175.375 495.778 mo
(!)sh
181.688 468.966 mo
184.25 468.966 li
442.063 468.966 mo
439.438 468.966 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 471.715 mo
(%!)
[4.17 0 ]xsh
181.688 517.09 mo
442.063 517.09 li
181.688 468.966 mo
442.063 468.966 li
181.688 517.09 mo
181.688 468.966 li
442.063 517.09 mo
442.063 468.966 li
@
gsave
181.688 517.153 mo
442.125 517.153 li
442.125 468.966 li
181.688 468.966 li
cp
clp
1.5 lw
182.5 495.84 mo
183.375 495.528 li
184.25 495.153 li
186.875 494.403 li
188.625 494.028 li
189.437 493.903 li
190.313 493.778 li
191.188 493.653 li
192.062 493.59 li
192.938 493.528 li
195.563 493.341 li
196.438 493.278 li
197.25 493.278 li
198.125 493.215 li
201.625 493.215 li
202.5 493.153 li
204.25 493.153 li
205.063 493.215 li
209.438 493.215 li
210.313 493.278 li
212.875 493.278 li
213.75 493.341 li
214.624 493.341 li
215.5 493.403 li
216.375 493.403 li
218.125 493.528 li
219 493.528 li
219.874 493.59 li
220.688 493.653 li
221.562 493.716 li
222.437 493.778 li
223.313 493.903 li
224.188 493.965 li
225.062 494.028 li
225.938 494.153 li
226.813 494.278 li
227.625 494.403 li
228.5 494.528 li
232 495.278 li
233.75 495.778 li
234.625 496.09 li
235.438 496.403 li
237.188 497.153 li
238.063 497.59 li
238.937 498.09 li
240.688 499.215 li
242.438 500.59 li
243.25 501.34 li
244.125 502.215 li
245.875 504.09 li
247.625 506.215 li
248.5 507.403 li
249.375 508.528 li
250.25 509.715 li
251.063 510.84 li
251.938 511.903 li
252.812 512.841 li
253.688 513.653 li
254.563 514.215 li
255.437 514.528 li
256.313 514.59 li
257.188 514.341 li
258.062 513.84 li
258.875 513.028 li
259.75 511.965 li
260.625 510.715 li
261.5 509.278 li
262.375 507.778 li
263.25 506.215 li
264.125 504.591 li
265 503.028 li
265.875 501.528 li
266.687 500.091 li
267.563 498.778 li
268.438 497.528 li
269.312 496.403 li
270.188 495.403 li
271.063 494.466 li
271.937 493.59 li
272.813 492.84 li
273.625 492.153 li
275.375 491.028 li
276.25 490.528 li
277.125 490.09 li
278.875 489.34 li
280.625 488.715 li
281.438 488.403 li
282.313 488.153 li
283.187 487.84 li
285.812 487.09 li
286.688 486.778 li
288.437 486.278 li
289.25 485.965 li
292.75 484.716 li
294.5 483.966 li
295.375 483.653 li
296.25 483.216 li
297.062 482.841 li
298.813 482.091 li
299.687 481.653 li
302.312 480.528 li
304.063 479.903 li
304.875 479.59 li
305.75 479.34 li
306.625 479.153 li
307.5 479.028 li
308.375 478.903 li
310.125 478.903 li
311 478.965 li
311.875 479.153 li
312.688 479.34 li
314.438 479.841 li
317.063 480.966 li
318.812 481.84 li
319.625 482.278 li
320.5 482.778 li
322.25 483.653 li
323.125 484.028 li
324 484.465 li
324.875 484.84 li
325.75 485.153 li
326.625 485.528 li
327.437 485.778 li
328.313 486.09 li
329.188 486.278 li
330.062 486.528 li
330.938 486.715 li
331.813 486.84 li
333.563 487.09 li
334.438 487.153 li
335.25 487.153 li
336.125 487.215 li
337 487.153 li
337.875 487.153 li
338.75 487.09 li
339.625 487.028 li
340.5 486.903 li
341.375 486.778 li
342.25 486.653 li
343.063 486.465 li
343.937 486.278 li
344.813 486.028 li
345.688 485.841 li
346.562 485.528 li
347.438 485.278 li
350.063 484.341 li
350.875 483.966 li
351.75 483.591 li
352.625 483.153 li
353.5 482.778 li
354.375 482.34 li
355.25 481.965 li
357 481.09 li
357.812 480.715 li
360.437 479.59 li
361.313 479.278 li
363.062 478.778 li
364.813 478.528 li
366.5 478.528 li
368.25 478.778 li
369.125 479.028 li
370.875 479.653 li
371.75 480.028 li
372.625 480.465 li
373.438 480.903 li
376.063 482.403 li
376.937 482.841 li
378.688 483.84 li
380.438 484.716 li
381.25 485.091 li
383 485.841 li
384.75 486.465 li
385.625 486.715 li
388.25 487.278 li
389.063 487.403 li
389.938 487.528 li
390.812 487.59 li
391.688 487.653 li
393.437 487.653 li
394.313 487.59 li
396.062 487.465 li
396.875 487.403 li
397.75 487.278 li
398.625 487.09 li
399.5 486.966 li
400.375 486.715 li
401.25 486.528 li
403 486.028 li
403.813 485.715 li
406.438 484.778 li
407.312 484.403 li
408.188 483.966 li
409.063 483.591 li
410.813 482.715 li
411.625 482.278 li
412.5 481.778 li
413.375 481.341 li
414.25 480.84 li
416 479.965 li
418.625 478.84 li
419.438 478.59 li
420.313 478.341 li
422.063 478.09 li
422.937 478.09 li
423.812 478.153 li
424.688 478.278 li
425.562 478.465 li
426.437 478.778 li
427.249 479.091 li
429 479.965 li
431.625 481.465 li
434.25 483.153 li
435.062 483.653 li
435.938 484.215 li
436.812 484.653 li
437.687 485.153 li
438.563 485.59 li
440.312 486.34 li
442.062 486.966 li
.895628 .7673 0 0 cmyk
@
181.688 496.278 mo
182.5 495.84 li
@
grestore
217.64 493.898 mo
217.64 494.588 217.08 495.148 216.39 495.148 cv
215.7 495.148 215.14 494.588 215.14 493.898 cv
215.14 493.208 215.7 492.648 216.39 492.648 cv
217.08 492.648 217.64 493.208 217.64 493.898 cv
f
235.01 495.518 mo
235.01 496.208 234.45 496.768 233.76 496.768 cv
233.07 496.768 232.51 496.208 232.51 495.518 cv
232.51 494.828 233.07 494.268 233.76 494.268 cv
234.45 494.268 235.01 494.828 235.01 495.518 cv
f
252.29 510.458 mo
252.29 511.148 251.73 511.708 251.04 511.708 cv
250.35 511.708 249.79 511.148 249.79 510.458 cv
249.79 509.768 250.35 509.208 251.04 509.208 cv
251.73 509.208 252.29 509.768 252.29 510.458 cv
f
269.66 497.318 mo
269.66 498.008 269.1 498.568 268.41 498.568 cv
267.72 498.568 267.16 498.008 267.16 497.318 cv
267.16 496.628 267.72 496.068 268.41 496.068 cv
269.1 496.068 269.66 496.628 269.66 497.318 cv
f
287.03 486.608 mo
287.03 487.298 286.47 487.858 285.78 487.858 cv
285.09 487.858 284.53 487.298 284.53 486.608 cv
284.53 485.918 285.09 485.358 285.78 485.358 cv
286.47 485.358 287.03 485.918 287.03 486.608 cv
f
304.445 480.848 mo
304.445 481.538 303.885 482.098 303.195 482.098 cv
302.505 482.098 301.945 481.538 301.945 480.848 cv
301.945 480.158 302.505 479.598 303.195 479.598 cv
303.885 479.598 304.445 480.158 304.445 480.848 cv
f
321.77 484.358 mo
321.77 485.048 321.21 485.608 320.52 485.608 cv
319.83 485.608 319.27 485.048 319.27 484.358 cv
319.27 483.668 319.83 483.108 320.52 483.108 cv
321.21 483.108 321.77 483.668 321.77 484.358 cv
f
339.14 487.688 mo
339.14 488.378 338.58 488.938 337.89 488.938 cv
337.2 488.938 336.64 488.378 336.64 487.688 cv
336.64 486.998 337.2 486.438 337.89 486.438 cv
338.58 486.438 339.14 486.998 339.14 487.688 cv
f
356.51 479.768 mo
356.51 480.458 355.95 481.018 355.26 481.018 cv
354.57 481.018 354.01 480.458 354.01 479.768 cv
354.01 479.078 354.57 478.518 355.26 478.518 cv
355.95 478.518 356.51 479.078 356.51 479.768 cv
f
373.88 479.498 mo
373.88 480.188 373.32 480.748 372.63 480.748 cv
371.94 480.748 371.38 480.188 371.38 479.498 cv
371.38 478.808 371.94 478.248 372.63 478.248 cv
373.32 478.248 373.88 478.808 373.88 479.498 cv
f
391.16 487.598 mo
391.16 488.288 390.6 488.848 389.91 488.848 cv
389.22 488.848 388.66 488.288 388.66 487.598 cv
388.66 486.908 389.22 486.348 389.91 486.348 cv
390.6 486.348 391.16 486.908 391.16 487.598 cv
f
408.53 485.438 mo
408.53 486.128 407.97 486.688 407.28 486.688 cv
406.59 486.688 406.03 486.128 406.03 485.438 cv
406.03 484.748 406.59 484.188 407.28 484.188 cv
407.97 484.188 408.53 484.748 408.53 485.438 cv
f
425.945 481.118 mo
425.945 481.808 425.385 482.368 424.695 482.368 cv
424.005 482.368 423.445 481.808 423.445 481.118 cv
423.445 480.428 424.005 479.868 424.695 479.868 cv
425.385 479.868 425.945 480.428 425.945 481.118 cv
f
443.315 488.723 mo
443.315 489.413 442.755 489.973 442.065 489.973 cv
441.375 489.973 440.815 489.413 440.815 488.723 cv
440.815 488.033 441.375 487.473 442.065 487.473 cv
442.755 487.473 443.315 488.033 443.315 488.723 cv
f
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g17 <1C60D8A8C9B7A73DB9AA12572CE44B37D0759EC5FA4258DA87660F3841
304B61A1A911D1876BE6D5484230C2A9DECADC4A3BB259186F9713382F530716
56420086C18502612AEB2A0E39781AC31868BC5BE3AB2872591151CD2F994021
F04AB4E3C05AD2A97CE0F737B6F0C53FBA3CB18D70D123> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 45 /g17 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 /g16 /g1 /g15 /g2 /g17 210{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [0 -7.5 -7.5 0 0 0 ]msf
161.687 498.528 mo
(-*+,)
[-3.75 -2.49747 -2.08499 0 ]ysh
gsave
181.688 517.153 mo
442.125 517.153 li
442.125 468.966 li
181.688 468.966 li
cp
clp
1.5 lw
181.688 496.278 mo
182.5 495.903 li
183.375 495.528 li
185.125 494.903 li
186 494.653 li
188.625 494.091 li
189.437 493.965 li
191.188 493.716 li
192.062 493.653 li
192.938 493.528 li
193.813 493.465 li
194.687 493.465 li
195.563 493.403 li
196.438 493.341 li
197.25 493.341 li
198.125 493.278 li
199.875 493.278 li
200.75 493.215 li
205.937 493.215 li
206.813 493.278 li
209.438 493.278 li
210.313 493.341 li
212.063 493.341 li
212.875 493.403 li
213.75 493.403 li
215.5 493.528 li
216.375 493.528 li
217.249 493.59 li
219 493.716 li
219.874 493.778 li
220.688 493.84 li
221.562 493.903 li
222.437 493.965 li
223.313 494.091 li
224.188 494.215 li
225.062 494.278 li
225.938 494.403 li
226.813 494.59 li
227.625 494.715 li
230.25 495.278 li
232.875 496.028 li
233.75 496.341 li
234.625 496.716 li
235.438 497.091 li
236.312 497.466 li
237.188 497.903 li
238.063 498.403 li
238.937 498.966 li
240.688 500.215 li
242.438 501.715 li
243.25 502.59 li
244.125 503.466 li
245.875 505.465 li
247.625 507.591 li
248.5 508.716 li
250.25 510.84 li
251.063 511.84 li
251.938 512.653 li
252.812 513.34 li
253.688 513.84 li
254.563 514.09 li
255.437 514.028 li
256.313 513.778 li
257.188 513.216 li
258.062 512.403 li
258.875 511.403 li
259.75 510.153 li
260.625 508.84 li
261.5 507.403 li
263.25 504.403 li
265 501.528 li
265.875 500.153 li
266.687 498.903 li
267.563 497.715 li
268.438 496.653 li
269.312 495.653 li
270.188 494.778 li
271.063 493.965 li
271.937 493.215 li
272.813 492.528 li
273.625 491.965 li
274.5 491.403 li
275.375 490.903 li
276.25 490.465 li
278 489.715 li
280.625 488.778 li
281.438 488.466 li
284.063 487.716 li
284.938 487.403 li
286.688 486.903 li
287.563 486.591 li
288.437 486.34 li
289.25 486.028 li
291.875 485.091 li
292.75 484.716 li
293.625 484.403 li
295.375 483.653 li
296.25 483.216 li
297.062 482.841 li
297.938 482.466 li
298.813 482.028 li
300.563 481.278 li
301.438 480.84 li
302.312 480.528 li
303.188 480.153 li
304.063 479.841 li
304.875 479.528 li
307.5 478.965 li
308.375 478.903 li
309.25 478.84 li
310.125 478.903 li
311 478.965 li
311.813 479.153 li
312.688 479.34 li
313.562 479.59 li
314.438 479.903 li
316.187 480.653 li
318.812 481.965 li
319.625 482.403 li
320.5 482.903 li
323.125 484.215 li
324 484.59 li
324.875 485.028 li
325.75 485.34 li
326.625 485.715 li
327.437 486.028 li
330.062 486.778 li
330.938 486.966 li
331.813 487.09 li
333.563 487.341 li
334.438 487.403 li
335.25 487.465 li
336.125 487.528 li
337 487.528 li
337.875 487.465 li
338.75 487.465 li
339.625 487.403 li
340.5 487.278 li
341.375 487.215 li
342.25 487.09 li
343.063 486.903 li
345.688 486.34 li
347.438 485.841 li
350.063 484.903 li
350.875 484.528 li
351.75 484.215 li
352.625 483.84 li
353.5 483.403 li
354.375 483.028 li
357 481.716 li
357.812 481.278 li
358.688 480.903 li
359.563 480.465 li
361.313 479.715 li
363.062 479.091 li
363.938 478.84 li
364.813 478.653 li
365.625 478.528 li
366.5 478.465 li
367.375 478.465 li
368.25 478.528 li
369.125 478.653 li
370 478.84 li
371.75 479.466 li
372.625 479.841 li
373.438 480.278 li
374.312 480.715 li
380.438 484.215 li
381.25 484.653 li
383 485.528 li
383.875 485.903 li
386.5 486.84 li
387.375 487.09 li
388.25 487.278 li
389.063 487.465 li
389.938 487.653 li
391.688 487.903 li
393.437 488.028 li
396.062 488.028 li
396.875 487.965 li
397.75 487.903 li
398.625 487.778 li
399.5 487.716 li
400.375 487.528 li
401.25 487.403 li
403 487.028 li
403.813 486.778 li
405.563 486.278 li
408.188 485.34 li
409.937 484.59 li
410.813 484.153 li
411.625 483.778 li
412.5 483.34 li
413.375 482.841 li
414.25 482.403 li
415.125 481.903 li
416 481.465 li
417.75 480.465 li
418.625 480.028 li
419.438 479.59 li
421.187 478.84 li
422.063 478.528 li
422.937 478.278 li
423.812 478.09 li
424.688 477.966 li
0 .990631 1 .000396735 cmyk
@
grestore
181.688 592.653 mo
442.063 592.653 li
442.063 544.465 li
181.688 544.465 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
181.688 592.653 mo
181.688 544.465 li
442.063 544.465 li
442.063 592.653 li
181.688 592.653 li
@
181.688 592.653 mo
442.063 592.653 li
181.688 544.465 mo
442.063 544.465 li
181.688 592.653 mo
181.688 544.465 li
442.063 592.653 mo
442.063 544.465 li
181.688 592.653 mo
442.063 592.653 li
181.688 592.653 mo
181.688 544.465 li
181.688 592.653 mo
181.688 590.028 li
181.688 544.465 mo
181.688 547.028 li
1 /0 /CSD get_res sepcs
1 sep
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
179.625 601.715 mo
(!)sh
225.062 592.653 mo
225.062 590.028 li
225.062 544.465 mo
225.062 547.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
219.875 601.715 mo
(!"#)
[4.17 2.08501 0 ]xsh
268.438 592.653 mo
268.438 590.028 li
268.438 544.465 mo
268.438 547.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
266.375 601.715 mo
($)sh
311.875 592.653 mo
311.875 590.028 li
311.875 544.465 mo
311.875 547.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
306.688 601.715 mo
($"#)
[4.17001 2.08499 0 ]xsh
355.25 592.653 mo
355.25 590.028 li
355.25 544.465 mo
355.25 547.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
353.188 601.715 mo
(%)sh
398.625 592.653 mo
398.625 590.028 li
398.625 544.465 mo
398.625 547.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
393.437 601.715 mo
(%"#)
[4.17001 2.08499 0 ]xsh
442.063 592.653 mo
442.063 590.028 li
442.063 544.465 mo
442.063 547.028 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
440 601.715 mo
(&)sh
181.688 592.653 mo
184.25 592.653 li
442.063 592.653 mo
439.438 592.653 li
@
LHFFVG+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
166.813 595.403 mo
( )sh
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.193 595.403 mo
('!)
[4.17 0 ]xsh
181.688 576.591 mo
184.25 576.591 li
442.063 576.591 mo
439.438 576.591 li
@
LHFFVG+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
166.813 579.34 mo
( )sh
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.193 579.34 mo
(%!)
[4.17 0 ]xsh
181.688 560.528 mo
184.25 560.528 li
442.063 560.528 mo
439.438 560.528 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
175.375 563.278 mo
(!)sh
181.688 544.465 mo
184.25 544.465 li
442.063 544.465 mo
439.438 544.465 li
@
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
171.188 547.215 mo
(%!)
[4.17 0 ]xsh
181.688 592.653 mo
442.063 592.653 li
181.688 544.465 mo
442.063 544.465 li
181.688 592.653 mo
181.688 544.465 li
442.063 592.653 mo
442.063 544.465 li
@
gsave
181.688 592.716 mo
442.125 592.716 li
442.125 544.466 li
181.688 544.466 li
cp
clp
1.5 lw
182.5 559.778 mo
186 560.028 li
186.875 560.028 li
188.625 560.153 li
189.437 560.215 li
190.313 560.278 li
191.188 560.278 li
192.062 560.34 li
192.938 560.34 li
193.813 560.403 li
194.687 560.403 li
195.563 560.466 li
197.25 560.466 li
198.125 560.528 li
199.875 560.528 li
200.75 560.59 li
203.375 560.59 li
204.25 560.653 li
205.937 560.653 li
206.813 560.715 li
208.562 560.715 li
209.438 560.778 li
211.187 560.778 li
212.063 560.841 li
212.875 560.841 li
214.624 560.965 li
215.5 560.965 li
219.874 561.278 li
220.688 561.34 li
221.562 561.403 li
223.313 561.653 li
224.188 561.715 li
225.062 561.84 li
225.938 562.028 li
226.813 562.153 li
227.625 562.341 li
228.5 562.528 li
229.375 562.778 li
230.25 562.965 li
231.125 563.278 li
232 563.528 li
232.875 563.841 li
234.625 564.591 li
235.438 565.09 li
236.312 565.528 li
238.063 566.653 li
239.813 568.028 li
240.688 568.778 li
242.438 570.528 li
243.25 571.465 li
245.875 574.653 li
246.75 575.778 li
247.625 576.84 li
248.5 577.778 li
249.375 578.653 li
250.25 579.34 li
251.063 579.778 li
251.938 579.84 li
252.812 579.591 li
253.688 578.903 li
254.563 577.778 li
255.437 576.216 li
256.313 574.341 li
257.188 572.215 li
258.062 569.903 li
258.875 567.591 li
259.75 565.341 li
260.625 563.34 li
261.5 561.528 li
262.375 559.965 li
263.25 558.715 li
264.125 557.715 li
265 556.965 li
265.875 556.403 li
266.687 556.028 li
267.563 555.778 li
268.438 555.653 li
269.312 555.591 li
270.188 555.528 li
271.063 555.528 li
271.937 555.591 li
272.813 555.653 li
273.625 555.715 li
274.5 555.715 li
275.375 555.778 li
278 555.778 li
278.875 555.715 li
279.75 555.715 li
280.625 555.591 li
281.438 555.528 li
284.063 555.153 li
286.688 554.59 li
288.437 554.091 li
289.25 553.84 li
290.125 553.59 li
296.25 551.403 li
297.062 551.091 li
300.563 550.09 li
302.312 549.84 li
304.063 549.715 li
304.875 549.778 li
305.75 549.903 li
306.625 550.09 li
307.5 550.341 li
308.375 550.653 li
310.125 551.403 li
311 551.903 li
311.875 552.34 li
312.688 552.84 li
313.562 553.341 li
314.438 553.903 li
315.313 554.34 li
316.187 554.841 li
317.063 555.278 li
318.812 556.028 li
319.625 556.341 li
320.5 556.653 li
321.375 556.903 li
323.125 557.278 li
324 557.403 li
326.625 557.59 li
327.437 557.59 li
328.313 557.528 li
329.188 557.528 li
330.938 557.403 li
331.813 557.278 li
332.687 557.215 li
334.438 556.965 li
335.25 556.778 li
336.125 556.653 li
339.625 555.903 li
342.25 555.153 li
343.063 554.903 li
343.937 554.653 li
347.438 553.403 li
348.313 553.028 li
349.187 552.715 li
350.063 552.34 li
350.875 552.028 li
352.625 551.278 li
356.125 550.028 li
357 549.778 li
357.812 549.591 li
358.688 549.465 li
360.437 549.34 li
361.313 549.403 li
362.188 549.528 li
363.938 550.028 li
364.813 550.403 li
365.625 550.778 li
367.375 551.778 li
370.875 554.028 li
371.75 554.528 li
372.625 555.09 li
373.438 555.528 li
374.312 555.966 li
376.063 556.716 li
376.937 557.028 li
377.813 557.278 li
379.562 557.653 li
380.438 557.778 li
381.25 557.841 li
383 557.965 li
383.875 557.965 li
384.75 557.903 li
385.625 557.903 li
386.5 557.841 li
387.375 557.715 li
388.25 557.653 li
389.063 557.528 li
389.938 557.403 li
391.688 557.153 li
393.437 556.778 li
394.313 556.653 li
395.188 556.403 li
396.062 556.215 li
396.875 555.966 li
397.75 555.778 li
398.625 555.528 li
399.5 555.216 li
400.375 554.965 li
403 554.028 li
403.813 553.653 li
404.687 553.341 li
406.438 552.591 li
407.312 552.153 li
410.813 550.653 li
411.625 550.278 li
412.5 549.903 li
413.375 549.653 li
414.25 549.34 li
415.125 549.153 li
416.875 548.903 li
417.75 548.903 li
418.625 548.965 li
419.438 549.153 li
420.313 549.403 li
422.063 550.153 li
422.937 550.653 li
424.688 551.778 li
425.562 552.403 li
426.437 553.09 li
427.249 553.716 li
428.125 554.34 li
430.75 556.028 li
431.625 556.465 li
433.375 557.215 li
434.25 557.528 li
435.062 557.778 li
436.812 558.153 li
437.687 558.216 li
438.563 558.34 li
439.437 558.34 li
440.312 558.403 li
441.188 558.34 li
442.062 558.34 li
.895628 .7673 0 0 cmyk
@
181.688 559.716 mo
182.5 559.778 li
@
grestore
217.64 559.778 mo
217.64 560.468 217.08 561.028 216.39 561.028 cv
215.7 561.028 215.14 560.468 215.14 559.778 cv
215.14 559.088 215.7 558.528 216.39 558.528 cv
217.08 558.528 217.64 559.088 217.64 559.778 cv
f
235.01 563.648 mo
235.01 564.338 234.45 564.898 233.76 564.898 cv
233.07 564.898 232.51 564.338 232.51 563.648 cv
232.51 562.958 233.07 562.398 233.76 562.398 cv
234.45 562.398 235.01 562.958 235.01 563.648 cv
f
252.29 579.893 mo
252.29 580.583 251.73 581.143 251.04 581.143 cv
250.35 581.143 249.79 580.583 249.79 579.893 cv
249.79 579.203 250.35 578.643 251.04 578.643 cv
251.73 578.643 252.29 579.203 252.29 579.893 cv
f
269.66 554.558 mo
269.66 555.248 269.1 555.808 268.41 555.808 cv
267.72 555.808 267.16 555.248 267.16 554.558 cv
267.16 553.868 267.72 553.308 268.41 553.308 cv
269.1 553.308 269.66 553.868 269.66 554.558 cv
f
287.03 554.918 mo
287.03 555.608 286.47 556.168 285.78 556.168 cv
285.09 556.168 284.53 555.608 284.53 554.918 cv
284.53 554.228 285.09 553.668 285.78 553.668 cv
286.47 553.668 287.03 554.228 287.03 554.918 cv
f
304.445 549.653 mo
304.445 550.343 303.885 550.903 303.195 550.903 cv
302.505 550.903 301.945 550.343 301.945 549.653 cv
301.945 548.963 302.505 548.403 303.195 548.403 cv
303.885 548.403 304.445 548.963 304.445 549.653 cv
f
321.77 557.033 mo
321.77 557.723 321.21 558.283 320.52 558.283 cv
319.83 558.283 319.27 557.723 319.27 557.033 cv
319.27 556.343 319.83 555.783 320.52 555.783 cv
321.21 555.783 321.77 556.343 321.77 557.033 cv
f
339.14 556.583 mo
339.14 557.273 338.58 557.833 337.89 557.833 cv
337.2 557.833 336.64 557.273 336.64 556.583 cv
336.64 555.893 337.2 555.333 337.89 555.333 cv
338.58 555.333 339.14 555.893 339.14 556.583 cv
f
356.51 551.768 mo
356.51 552.458 355.95 553.018 355.26 553.018 cv
354.57 553.018 354.01 552.458 354.01 551.768 cv
354.01 551.078 354.57 550.518 355.26 550.518 cv
355.95 550.518 356.51 551.078 356.51 551.768 cv
f
373.88 555.008 mo
373.88 555.698 373.32 556.258 372.63 556.258 cv
371.94 556.258 371.38 555.698 371.38 555.008 cv
371.38 554.318 371.94 553.758 372.63 553.758 cv
373.32 553.758 373.88 554.318 373.88 555.008 cv
f
391.16 558.023 mo
391.16 558.713 390.6 559.273 389.91 559.273 cv
389.22 559.273 388.66 558.713 388.66 558.023 cv
388.66 557.333 389.22 556.773 389.91 556.773 cv
390.6 556.773 391.16 557.333 391.16 558.023 cv
f
408.53 553.118 mo
408.53 553.808 407.97 554.368 407.28 554.368 cv
406.59 554.368 406.03 553.808 406.03 553.118 cv
406.03 552.428 406.59 551.868 407.28 551.868 cv
407.97 551.868 408.53 552.428 408.53 553.118 cv
f
425.945 552.308 mo
425.945 552.998 425.385 553.558 424.695 553.558 cv
424.005 553.558 423.445 552.998 423.445 552.308 cv
423.445 551.618 424.005 551.058 424.695 551.058 cv
425.385 551.058 425.945 551.618 425.945 552.308 cv
f
443.315 559.463 mo
443.315 560.153 442.755 560.713 442.065 560.713 cv
441.375 560.713 440.815 560.153 440.815 559.463 cv
440.815 558.773 441.375 558.213 442.065 558.213 cv
442.755 558.213 443.315 558.773 443.315 559.463 cv
f
true set_gvm
%ADOBeginSubsetFont: OICAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVF+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g18 <1C60D8A8C9B7A73DEABE54629387A84F059D312ADC9A1BC62C3E425E4C
57824FE89DFBD64BF53A53> |-
/g14 <1C60D8A8C9B7D8BE7B6CE17BCB3B2D4B0FB3E6AF9E6DDADD178189522C
E1F006> |-
/g12 <1C60D8A8C9B854D0EE4B20327A907C36187261> |-
/g13 <1C60D8A8C9B6B41C9910B30BE12408A0CCE83CFCBF71D6A0AFED0B0C7E
6B8742F00BF38074693AE67B7536DF8025FC27BB7165EE6A43D7B9497E065E42
F0EE8DA1C58C8863D1E0F8290CD2A3925749EE5F186B> |-
/g11 <1C60D8A8C9B64EDFE336C703EA12FABA68C9F5D15F1A9B67653505BC29
F8D56A4237858E054C3198877A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVF+Helvetica /Encoding get
dup 46 /g18 put
dup 47 /g14 put
dup 48 /g12 put
dup 49 /g13 put
dup 50 /g11 put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVF+Helvetica*1 
[33{/.notdef}rp /g4 /g3 /g9 /g5 /g6 /g7 /g8 
/g10 /g16 /g1 /g15 /g2 /g17 /g18 /g14 
/g12 /g13 /g11 205{/.notdef}rp]
LHFFVF+Helvetica nf
LHFFVF+Helvetica*1 [0 -7.5 -7.5 0 0 0 ]msf
161.687 574.028 mo
(.*+,)
[-3.75 -2.4975 -2.08496 0 ]ysh
LHFFVF+Helvetica*1 [7.5 0 0 -7.5 0 0 ]msf
302.875 610.653 mo
(/012)
[4.58243 2.08499 6.24747 0 ]xsh
gsave
181.688 592.716 mo
442.125 592.716 li
442.125 544.466 li
181.688 544.466 li
cp
clp
1.5 lw
181.688 559.716 mo
182.5 559.778 li
184.25 559.903 li
185.125 559.903 li
188.625 560.153 li
189.437 560.215 li
190.313 560.215 li
191.188 560.278 li
192.062 560.34 li
192.938 560.34 li
193.813 560.403 li
194.687 560.403 li
195.563 560.466 li
196.438 560.466 li
197.25 560.528 li
199 560.528 li
199.875 560.59 li
201.625 560.59 li
202.5 560.653 li
204.25 560.653 li
205.063 560.715 li
205.937 560.715 li
206.813 560.778 li
208.562 560.778 li
209.438 560.841 li
210.313 560.841 li
211.187 560.903 li
212.063 560.903 li
212.875 560.965 li
214.624 561.09 li
215.5 561.09 li
217.249 561.216 li
218.125 561.278 li
219 561.403 li
219.874 561.465 li
220.688 561.591 li
221.562 561.653 li
224.188 562.028 li
226.813 562.59 li
227.625 562.778 li
230.25 563.528 li
231.125 563.841 li
233.75 564.966 li
234.625 565.465 li
235.438 565.965 li
236.312 566.528 li
238.063 567.778 li
239.813 569.278 li
241.562 571.028 li
242.438 572.028 li
243.25 573.028 li
244.125 574.028 li
245 575.091 li
246.75 577.09 li
247.625 577.965 li
248.5 578.715 li
249.375 579.216 li
250.25 579.465 li
251.063 579.403 li
251.938 579.028 li
252.812 578.153 li
253.688 576.966 li
254.563 575.403 li
255.437 573.528 li
256.313 571.403 li
258.062 567.028 li
258.875 564.903 li
259.75 562.965 li
260.625 561.278 li
261.5 559.84 li
262.375 558.653 li
263.25 557.715 li
264.125 557.028 li
265 556.528 li
265.875 556.153 li
266.687 555.903 li
268.438 555.653 li
270.188 555.653 li
271.063 555.715 li
271.937 555.778 li
272.813 555.778 li
273.625 555.84 li
274.5 555.903 li
277.125 555.903 li
278 555.84 li
278.875 555.84 li
279.75 555.715 li
280.625 555.653 li
281.438 555.528 li
283.187 555.278 li
286.688 554.528 li
288.437 554.028 li
289.25 553.716 li
290.125 553.465 li
294.5 551.903 li
295.375 551.528 li
296.25 551.215 li
297.062 550.903 li
300.563 549.903 li
302.312 549.653 li
303.188 549.591 li
304.063 549.591 li
304.875 549.715 li
305.75 549.84 li
306.625 550.028 li
308.375 550.653 li
311 551.965 li
311.813 552.528 li
312.688 553.028 li
313.562 553.59 li
316.187 555.09 li
317.938 555.966 li
318.812 556.341 li
319.625 556.653 li
320.5 556.965 li
321.375 557.215 li
322.25 557.403 li
324.875 557.778 li
325.75 557.841 li
329.188 557.841 li
330.938 557.715 li
332.687 557.466 li
333.563 557.403 li
334.438 557.278 li
335.25 557.091 li
336.125 556.965 li
340.5 556.028 li
342.25 555.528 li
343.063 555.278 li
343.937 555.028 li
348.313 553.465 li
349.187 553.09 li
350.063 552.778 li
350.875 552.403 li
354.375 550.903 li
357 549.966 li
357.812 549.715 li
358.688 549.465 li
360.437 549.216 li
361.313 549.153 li
362.188 549.216 li
363.062 549.34 li
363.938 549.528 li
364.813 549.778 li
365.625 550.153 li
367.375 551.028 li
370 552.715 li
370.875 553.341 li
371.75 553.903 li
372.625 554.528 li
373.438 555.09 li
375.188 556.09 li
376.063 556.465 li
376.937 556.903 li
377.813 557.215 li
379.562 557.715 li
380.438 557.903 li
381.25 558.028 li
382.125 558.153 li
383.875 558.278 li
386.5 558.278 li
388.25 558.153 li
389.063 558.028 li
389.938 557.965 li
393.437 557.466 li
396.062 556.903 li
396.875 556.716 li
398.625 556.341 li
401.25 555.591 li
402.125 555.278 li
403 555.028 li
403.813 554.715 li
404.687 554.403 li
406.438 553.653 li
407.312 553.341 li
408.188 552.903 li
409.937 552.153 li
410.813 551.715 li
411.625 551.278 li
413.375 550.528 li
414.25 550.09 li
415.125 549.778 li
416 549.403 li
417.75 548.903 li
418.625 548.778 li
419.438 548.653 li
420.313 548.653 li
421.187 548.715 li
422.063 548.903 li
422.937 549.153 li
423.812 549.465 li
424.688 549.903 li
0 .990631 1 .000396735 cmyk
@
grestore
true set_gvm
%ADOBeginSubsetFont: RXMAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
LHFFVC+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED
90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F0
55B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDE
C0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03
DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA9
22C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBAD
B3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A7698
DF02C61BB3071F67A562DD96D0521F578EC9F57BF5A71BF023ACCD67B8727CFD
38538E62ACB3D55D0B01252803DA68060E5342CFD41A7D> |-
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/six <1C60D8A8C9B7A73D3B2B97FE394CF5175EFEC06CD8F59A375E41591273
E0C059123310EC79AE072F532A0C9DF11EDCF7D4B9D83F0A2FCBB058CCF95C0F
F8BAD8605C0C2E8D60E28BE3D0E0DD42D8AAC3094E7159CC3989179C22CC5AA3
B3825C4ED9C5A83B733BA4666CE2A2B0097F22D25C776953D494478010B9DD2B
957D6BF7D7A87CBAE6ACDB0F5D283FB8F9162F4638E98F510D9821787A5D0E83
5BEB255F8F8C0C281516F7A946A0E0B79E8072185D1B76EC3B7739FCD106> |-
/colon <1C60D8A8C9B08A9570810981675968F2C9119AD767573D3896DCDEF9
DA5F5F8912E04C94872E9ED59B26AA7979866D70736E39162F6D45AC4E5BC3A4
24B2E5A438DB713C33C0D2FE26717D> |-
/B <1C60D8A8C9B08A945A1AB9ADE1431F477760039895429B9BEADD61922CFC
184419BAEF0F9B56C23FC5661D652FB46838C6961959B988108B7BE7927DB7D1
13140FAE852560AD0321B29F8DDAF47C42DE855BFCE5E894359EC68F12B5A5EF
91D5C9A819F5353B8A7ECCA93AD7565B0CB87EA5B54A18A4872BB4B57604690E
4A511AD187CB4431D0387A106BD295650A020AB1BDC8890F221B49C542C90C76
C5207D49FCDC51B6E2E50707> |-
/C <1C60D8A8C9B08A9454CA4C75C5C983901A105955FD02AB95A1D9A8A1EF86
541AF97FFF68AEDD6EF3F9788853DEF093D0FBD78A3FC5DB04802F61AEF127B4
D274CEA5A0495BD438B2F75833238070F9A0DEDDCFDFABEF5BEDD017B6BBEB22
A7AE0ECB6D46586699459E2B529F0C643928AD0C60B989B7B119C20E74352A5B
2677AF404D34EE8C876EF19CEC> |-
/E <1C60D8A8C9B08A94478101EE5603CAF9EA65B0A05B8389D7C1CF5C51F1F7
4696C0CEF5645C7B6A40F500D79FE10E9FE662B3E9326A3808402CE1090D692C
4ED68EDB8B4431B5FCC4F04AE568DED0677392BD79B1264E9F3418193C5B917C
B34635B006E80D355A74C6CE78F0EF1B944BBA6609A53532C815AD3A66B5B7FC
E4313375B43F59207B03> |-
/F <1C60D8A8C9B08A95E211B68BD74B7CA2EA30EA4FC2444F1F126966AA7729
7BA7EB9B6F06068DCAA13C02B3588F5A46379A5072E7E2DBF343C097B55CA4D5
88C6753F362DD28478A1BC56804A66D1A6D1CB247FEE04B2647D343D14D14B66
B993C73F534C4128A2626BB2404D5D4FD30D29B727A906D4DCB574AC37C31D5E
5DAFB5704A4D0DA0711E1E> |-
/R <1C60D8A8C9B08A9451E2C198C46CF0D9EABFA9FD85792390C749BB6A88FA
7917DCB59892FD0C5009977DF79610519F2C9B4981160954D87B28067B64902F
CA672A1EA4467509C61E197E33F24FCA5EFBDFB729B55B5C4117ECDB5BECF27E
38689E84ACC3DB0FC92B91213DD4A7E85FA5734C4E13F3F79A0D32FDD8C93C62
AE6FCB0157C6098018B88A9792212F13C7D0A1033F2D5084E094BAD54582913E
E91D18A8548EFC0A88E1E44D93AF30413B31D6EB8A83F584066D1B1BAAEDC943
46D88042D1DFD12BF62633AA55A8138483062D74A9EFC7B33F2C50BB370D726B
76FB1D1FC63806D916CC235BF380> |-
/a <1C60D8A8C9B7A73DCB03313BCF7BA903D75A87DEC6EB34306A2C875A7B9D
6F03FA56EC184A666A965328412CD76CCEF3CAD69BC525A6A87F1F2D19F5D1B7
FD73AE7371FEED4E7F3CC2802C465D966135A2EE9CF8A0BF2840255B111E8037
10168818EEA9C2DFE9C99A20ABC767161183EAE437218D2E1239DA58B1500E1F
7F2D27496F0873D02EC47EEDEB84F4B0D78003FE0EDD73F083F9C52A46ED942D
3466EB983C6AA2296E8F2602B3A2BC810F850571C10A31EC74CF8C0EACAB287D
E5031078E0A963D32061> |-
/b <1C60D8A8C9B08A95C5897169EED96D271CC0A201580A85BBB6CFE03702C9
389AEE25CE69D1BDDECD4E28232C32A3113C892241798575F645E97E1FEF4D17
BABACA9B1400EB966B8CBA5BFC74A4181A1A52C4AC1E4D4BCB3BEFBF05CAB342
4B8B71500585C2C89CD37B890F00AF434789553E13269B7993EDDE63F9B6DB1C
CC49FF90A25496B9C07E5617BD7387C1694D4EBB8E59CF0CEF85691D4C91D3CD
1D33AB05DBBDE11A3BE1086B97B8CBA534FBFB> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D
86FB33EF8157737910C2A21CF1859082F165505E98A2D559D2B21F8D988656D0
8136253C2962AD8B7BF2A4CE3B3D77FFEE3AC8C805C2D68655124FEAC62FFFA4
B2E84874A6B6FEF5E31C416CAF5B3B1B491C61B5BE3DD5423D78BF> |-
/d <1C60D8A8C9B08A95C5897169EED96D33CB6A9013DDE3D04C2845E595598C
4E4627D0E1F97AFD1FA3154224DA0D119EDECEF82924766CE4492626DF7B3B07
C4245B263AA58C37772C982C7955B9EED30A1A264318D030C3D295AD4CC9C21E
7AC9D2948AC9CD001C0EF80B50DF932CF6EE69C321627BC51A66341B5399D1E7
8024F824DB5DEE83140E59FB88138D6F0F5D2F350BA93460F2F700A9AE6D35AB
E4DB962D8E6D84D6D606A800DD98F8807C3555FEEB> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5C
B08921F2042A459BE0DE80ADD86BD8D3FC85885973F3B8E71B750A7BBBCB2EC2
7654BABC4A421F19CAF38DA67236E15B4E8454D787305B09443F6B2507420195
7C1B86920E2C7CED0E614A34A438ED72C4B057D323DD16C0BE898DF1> |-
/f <1C60D8A8C9B08A956BA65798425CE9B0A78F07A04AF2F8524751F181F94C
EF756ACD6AB92BD091D7482415CDE9144C26B1697F8DF70FCF1DEFD4FA16FBE3
9206B1378E548C93AC587B3EF0B1ED3ACC74CAAD2CEA03512A889B4BA237C2E5
79B0E01D3D82622F69FB50659184006104BE20E13DAFC7793B241C1FD1A3880C
4AA41E91E3F86F715551> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
6C40D52FF50AB2BCF83396829D3E501BD0EAB8595D9693E632ABAF05A4D1FBD5
E9FB32E59BDDF670BD3805B1A8647E1D2641030D018FCD259301AC116F3DEE87
AA68CECE526FB7B8BC0206EAEFB580DA05969530F8D40CD15579447988D4CF07
5C24F15E32C0A9AC369D08351B0D49CAFF731E593F6C55EE74B16DE9D9A4B199
3D1CF0FF1D3A57A52A0C64F106D414FF112A5DA34DEE3AB850B6A4492C25D3F0
9EFC86EFE140D828B1F4BAE5664F14014926ED1A5AFBCC814A3428F143CF5FB2
88702BF23054721A3BAA8027EF0D34A7A361A40A12717277178C5820C35A1131
71DEF9DBB455B7A9D7BB98406120BD93C5B4D04664B09F3E37553C20D6> |-
/h <1C60D8A8C9B08A95C5897169EED9664BED359D179BDDBB0B44F78A354068
F1882593A360E640ED3246F83F38F17203BDBBCE194B9E0A6BE002DEEC6E590D
34E67EDA7804A1C1CA9840B3036AA2F9D110358C769BBBA6E4ABF35AA04B72BD
94DD37985D5F60B66C4561BE8C71200493330FB300D08910FDC33541EB4ED02B
C0E5DA36A3AFFA9C2A4E001E9049F0E519949606FF0894B2E73F51ED> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDADBE9B65D
A53E9F2E54B16133284CA9914BED3880C793207FBDC7926300AD07E6E54407B5
1EA082FB5EE3816A6A23A8296A947037E49B372BD5DFBDAE3E0626953F75EA84
BE757683B949F1DE2291C5796E30589D0B63B15E0D5680411C> |-
/j <1C60D8A8C9B08A956BA65798425C99F9E21B31AD9D7D46055B6927E0A28A
ECC1418A3336BA4234C7F9442C0DE9BA878C87095F81AC64120B3762338C77D9
8CC6DD27B94A58E67CAB08F514CD98B3B4F9938B9CFB8CA4520BA8B627FC78F8
E0F443F14C065FC4B15A336B544A6B5CE40AFCB7DD46B36B2CD516D6760D561A
7A688A5581533C67A4E63DCC684A62C23527F4> |-
/k <1C60D8A8C9B08A95D222871B45C8170346D4B18ED19B2E2E03D20F864B5D
C5BD82CE186E8865448F19B50359E04C51718F8BDF55D412398F4EF83C05419A
DE886E1536E26F7FC0E53312F110D79646DAD9F1D10B32AFE3698557277E72D5
7B4C7DAD8FF58DCEB52B83B453E4BE2D48D6882B0AECFDF4A8BCF747376E22D9
81F8E1C7CD6E92891501D7EE1AA17A160448D2B40E0899A7693FEF353371FE21
8D3D2DA9622BE1E9110437FDF2C62C6B642301FAF5AD> |-
/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CD6CD1B880
05B79B666989E13C0F8D0889AD0162C7E87274D188EBBD1A911FDD0B6E360AA1
C515725198B9106B157680FC> |-
/m <1C60D8A8C9B08A940B724A74A01E6B7E417A0EEA9CCF58837F16A4309279
D4C1CC08359D1FA7FD10E0AFA90B9132C47CDD4E6827D8017CAF4E5B65090CE2
B069620DC38FECF904BAC042B28FA35A5D6632CC2899B92571CA76E097477A12
37436144BDBB6157A5C5B473CDBDE040AFDE31D37159E83AC75CF12EA5793A01
76A3A422381930CC3B1A17BCD95B6EBD3104CC40253F80174C89524325EFE206
A7879C7C9E8C1F8E9C0ECBB2F9FBA1A090EF980204254E4E57D08097CBAA9E99
7A6E9DDAB21EC6126AA86AEA3B08AD43F991C523777A8E82724E5CA12D46D05C
7B51942202D1FD96F0> |-
/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BD38846B55E34D4CAA6
E85E9CF3F20D5FF6B35F1C9AAE2A542B7B24E087B6004A4C7219997095CC0DD0
7A15DB83B5FEAD13F209441FFD364AD3DBF6E16129F3599BACA005A523490ABC
41E4DF320ACE384037EE1D352E3FAD8A9E2CECBD75A999F7B655F4FFBFAC6FFF
84029A8DF710DBB0D7CD4C1D20367E79BC4E312103DCC482005590EA2F1652EA
57C34D10CC78642AFD> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/p <1C60D8A8C9B08A95C5897169EED91609D9E4D5F91353A54E37DF51998183
52315911AF5324EFF8F803A0D7623A2DDCB047188B5B8F28AB77A5ED34430D99
57B9E0225FBFAE612AB3A16746E264A6930D63A3F157DEFA872D2CA520250AA3
380B48623F26CA3F7D040CB163CC4C6240013209FBA4AD816878F179C8F27320
EBC05CF6C42FFA533A0E8716E243D2941CFE755ACC6E312A0F393F2C290E0F1A
CE85DBC680C6195A83A8DF92> |-
/r <1C60D8A8C9B08A9584DCB847BA986212E50A1268FF1FD1FC6504D9F4D673
BD97E004E27192E1359AD741527FE014B82A8709E1D277CF1F73EB8831CADE61
1D9AD525BE07EEB6589229F52FE652CA10A278AC096BF0A2B010C8B215B1ACA0
BBB8EF8E3C77EF77F60B5CDD1035D115BEF1087A4AEB28A5F886037DA56DEC62
DBB1D4F1AE123A1AD0E8FD48681467> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A42FE340F518B826828C
B1C2BB6756CD4C9284475BF78FAB574767246E1F9CBC21AACF1F3C97D1790131
F28F8DFADB3AAE0AA727045B30CDDB07BDF05EDA5C24C0AFE386D470551D7E8E
D902488F32C5E29D2F3E7F01605EE454D8B7A57FD0F16F8D3A10D6235D828477
DAAA15E6231D70C2BB9D9C0718FB249BC89490F9614317D9D2089D530687FFE9
B32E2EABFBD5A30223E1691D4FE59FFF3C416D75396DC2C2F68135236C16492B
80BA292D01981169C65CE545147B052951BDA4BD86> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B3247B9CBDFB0724765D43ED23A7
B2BC7B24077C209594776C48799589E3DF7269407A6893D4C106057122D99E3F
649ACAFBE1812EEAA6C4DCDDD716BEB7694626BFFCAE715C15EF0FD8CE9F6FE4
E96B03> |-
/u <1C60D8A8C9B08A95C5897169EED96D33CB6A8CCD6F539BADC574F30FA019
2FAAA0351E8C93175F4B6BE4D2DCA8A13E4F01BEC5788441B5C71C1247369B6B
73137454B1C207EA4F43D533FE87512BAD8DD4F3DBBECD9A7A1CE3F33A4D3F31
6952FDB339B4B6A937009D6EC9821D8553981B7D8AABC3E750369071> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3EFC2EBF937B1E5F2B8
737EDCCFF78DB8693FA0E7B559CFAC0A233112105FC1A8807ADD3013D4AE86C4
38318F1223CADD606642DF7E9A8EE9BE743E975DA759D856D52F7E927FE33606
3979ED38AB2E1EA4CB4F371A1EB04E6C5B864C9DB5271435AB2DE7D9DE15A6B1
D9E3FD555F015DADE467> |-
/w <1C60D8A8C9B08A9454CA4C75C5C9761F27DFD501BA4813FE991E533E1CD1
E174DB2ECA59D495EC56B0C1FD43D089BD170DD220487C38F20C192FAA7E2E88
3AD5437BC552CE37BD6C6BBA40409BE02939A8B895FF98709899D61A578F68A8
22D6CFB7A000AD2B69212700685F8E729740E6656D3B8D43A0C52B18628B0EFF
5F05D1944E33A86827C6670A3438CE653DA430AB3E54D22481FDFA780C4812C2
F3255AA0E07A5FC796A8653D62150A6CD8B7FE4B68F43CAA66CB6512EB54E359
E67F4D5FAA2BB87B8812835557ADA47955DD5F> |-
/x <1C60D8A8C9B08A95D222871B45C8170346D4B3692E8D5307651DE3271DD6
AF0FFCDE284DD9CDD3B987BD9A4951E635C7A5CDCF53A699D8D2BA39BF571FED
C61B4760FA01C102B3CF6C44B24A57107DFFEFB711E00B7E6B8A7F332F9AC2C5
3243312E3CD55C94054BCA0B5D37362E138F5DD97019783B5271FD96258D5354
389532FB5D3FC50CB007DF880768FCF0AAEC6D6F5D8AB1559D6270DF0761EAD0
57A9F39E9A718AA16D8D8ECA90D61565C41A9B86CA057EC652FEE1927FFE969C
A046D06A10E75C83320EEEAB290370B870EF0E26D64C8EE9F9FD2B5549> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF37C9F679699CE0B0FB82274
530CA6994E4FADB5C701717EBB278510CEF9D9EF1CB9FAAD7A4852BC3264781D
C6E288589EC6BAAB146DF34989FBC4BF92E31D5C616C1050CCC8D58166B328D1
E315EF5F39AF721DC6173775DFB26E6B6D40709A2BB053DECCFFF00649FC51FF
5F341744BBA1E71297E598A51054A43B9F951D7105485742D0A3BB595676EC69
1F5215F9D0DE2FC2C87BF5CCF8146FF6F88E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LHFFVC+CMR10 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 54 /six put
dup 58 /colon put
dup 66 /B put
dup 67 /C put
dup 69 /E put
dup 70 /F put
dup 82 /R put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/LHFFVC+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period 4{/.notdef}rp 
/three /.notdef /five /six /seven 2{/.notdef}rp /colon 7{/.notdef}rp 
/B /C /.notdef /E /F 11{/.notdef}rp /R 14{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
LHFFVC+CMR10 nf
LHFFVC+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
117 649.196 mo
(Figure6:Examplesofanearlyrejectionintheinitialvalueestimationcase\(top\))
[6.5036 2.76762 4.98131 5.53525 3.90228 9.40865 4.98129 10.5185 6.78056 5.25829 4.98129 8.30182 
5.53525 2.76762 4.42735 8.91049 4.98129 8.02591 4.98129 10.5165 4.42735 4.98131 3.90228 2.76764 
10.2396 3.90228 4.42734 3.04459 4.42737 4.42737 3.87445 2.76761 4.98129 10.5166 2.76761 10.5165 
3.87448 5.53525 9.40866 2.76761 5.53528 2.75763 3.87448 2.76761 4.98132 7.7489 4.71036 4.98129 
2.76761 5.53528 9.40863 4.42737 3.92917 3.87448 2.76761 8.30182 4.98129 3.87448 2.76761 4.98129 
10.5166 4.42734 4.98129 3.9292 9.40866 3.87445 3.87445 4.98132 5.53525 0 ]xsh
117 661.151 mo
(andintheparameterestimationcase\(bottom\).Bluelinerepresentsthetruthfrom)
[4.9813 5.53525 9.79925 2.76762 9.8092 3.87447 5.53525 8.70129 5.53526 4.98129 3.90228 4.98131 
8.3018 4.42735 3.87445 4.42735 8.16628 4.42734 3.9292 3.87445 2.76764 8.30182 4.98129 3.87445 
2.76764 4.98129 9.8092 4.42734 4.98132 3.92917 8.69131 3.87448 5.81421 4.98129 3.87445 3.87448 
4.98129 8.30182 3.87445 10.0403 7.05646 2.76764 5.53525 8.70132 2.76761 2.76764 5.53525 8.70129 
3.89233 4.43732 5.53525 3.89233 4.43729 3.9292 4.42734 5.25632 3.87445 8.19318 3.87448 5.53525 
8.70129 3.87448 3.90228 5.53525 3.87445 9.79926 3.04462 3.90228 4.98129 0 ]xsh
117 673.106 mo
(whichobservations\(blackdots\)aregenerated.Redlineisthemodelrununtilanearly)
[7.19498 5.53525 2.76762 4.14839 8.71332 4.98131 5.53525 3.92918 4.42735 3.90228 4.71034 4.98129 
3.87447 2.76762 4.98129 5.53525 7.10727 3.87447 5.52528 2.76762 4.98131 4.15836 8.43634 5.53525 
4.98129 3.87447 3.92918 7.05252 4.98132 3.90228 7.60541 4.98132 4.42734 5.53525 4.42737 3.90228 
4.98129 3.87448 4.42731 5.53528 7.14117 7.3335 4.42734 8.71332 2.76761 2.76764 5.53525 7.60544 
2.76761 7.10727 3.87445 5.53525 7.60544 8.30182 5.26022 5.53528 4.42734 5.94571 3.90225 5.53528 
8.71332 5.53525 5.25629 3.87448 2.76761 5.94571 4.98129 8.71332 4.42737 4.98129 3.90228 2.76761 
0 ]xsh
117 685.062 mo
(rejection.Changingtheinitialvaluescauseslarge,suddendeviationsfromthereference)
[3.90228 4.42735 3.04461 4.42734 4.42735 3.87447 2.76762 4.98131 5.53525 7.02165 7.19498 5.53525 
4.98131 5.53525 4.98129 2.76762 5.53526 7.8007 3.87447 5.53525 7.2368 2.76762 5.53525 2.76762 
3.87447 2.76762 4.98129 5.57709 4.71033 4.98128 2.76764 5.53528 4.42731 6.73865 4.42737 4.98129 
5.53525 3.9292 4.42737 6.7486 2.76764 4.98126 3.89233 4.98132 4.43732 5.6767 3.92917 5.53525 
5.53528 5.53522 4.42737 8.3447 5.53525 4.42734 5.2583 2.76761 4.98129 3.87448 2.76761 4.98132 
5.53525 6.7486 3.04459 3.90228 4.98129 11.1113 3.87445 5.53525 7.23682 3.90228 4.42737 3.04459 
4.42734 3.90228 4.42737 5.53525 4.42734 0 ]xsh
117 697.017 mo
(data,andchangingtheparametersresultsinsmallerandsmootherchanges.)
[5.53525 4.9813 3.87446 4.98131 6.08517 4.98129 5.53525 8.86276 4.14839 5.53526 4.98129 5.53525 
4.98129 2.76764 5.53525 8.29884 3.87447 5.53525 7.7449 5.53525 4.98129 3.90228 4.98131 8.3018 
4.42735 3.87447 4.42737 3.90228 7.25665 3.90228 4.42737 3.9292 5.53522 2.76764 3.87445 7.24677 
2.76761 8.85281 3.9292 8.30179 4.98129 2.76764 2.76764 4.42734 7.22977 4.98132 5.53525 8.85281 
3.92917 8.30182 5.26025 4.98129 3.87445 5.53525 4.42737 7.21982 4.14841 5.53525 4.98129 5.53525 
4.98129 4.42737 3.92917 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize Letter
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
